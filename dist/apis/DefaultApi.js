/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime.js';
import { K8sIoApimachineryPkgApisMetaV1APIGroupFromJSON, K8sIoApimachineryPkgApisMetaV1APIGroupListFromJSON, K8sIoApimachineryPkgApisMetaV1APIResourceListFromJSON, K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON, K8sIoApimachineryPkgApisMetaV1RootPathsFromJSON, K8sIoApimachineryPkgApisMetaV1StatusFromJSON, K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON, V1AddVolumeOptionsToJSON, V1FreezeUnfreezeTimeoutToJSON, V1KubeVirtFromJSON, V1KubeVirtToJSON, V1KubeVirtListFromJSON, V1MigrateOptionsToJSON, V1PauseOptionsToJSON, V1RemoveVolumeOptionsToJSON, V1RestartOptionsToJSON, V1SEVMeasurementInfoFromJSON, V1SEVPlatformInfoFromJSON, V1SEVSecretOptionsToJSON, V1SEVSessionOptionsToJSON, V1StartOptionsToJSON, V1StopOptionsToJSON, V1UnpauseOptionsToJSON, V1VirtualMachineFromJSON, V1VirtualMachineToJSON, V1VirtualMachineInstanceFromJSON, V1VirtualMachineInstanceToJSON, V1VirtualMachineInstanceFileSystemListFromJSON, V1VirtualMachineInstanceGuestAgentInfoFromJSON, V1VirtualMachineInstanceGuestOSUserListFromJSON, V1VirtualMachineInstanceListFromJSON, V1VirtualMachineInstanceMigrationFromJSON, V1VirtualMachineInstanceMigrationToJSON, V1VirtualMachineInstanceMigrationListFromJSON, V1VirtualMachineInstancePresetFromJSON, V1VirtualMachineInstancePresetToJSON, V1VirtualMachineInstancePresetListFromJSON, V1VirtualMachineInstanceReplicaSetFromJSON, V1VirtualMachineInstanceReplicaSetToJSON, V1VirtualMachineInstanceReplicaSetListFromJSON, V1VirtualMachineListFromJSON, V1VirtualMachineMemoryDumpRequestToJSON, V1alpha1MigrationPolicyFromJSON, V1alpha1MigrationPolicyToJSON, V1alpha1MigrationPolicyListFromJSON, V1alpha1VirtualMachineCloneFromJSON, V1alpha1VirtualMachineCloneToJSON, V1alpha1VirtualMachineCloneListFromJSON, V1alpha1VirtualMachinePoolFromJSON, V1alpha1VirtualMachinePoolToJSON, V1alpha1VirtualMachinePoolListFromJSON, V1beta1VirtualMachineClusterInstancetypeFromJSON, V1beta1VirtualMachineClusterInstancetypeToJSON, V1beta1VirtualMachineClusterInstancetypeListFromJSON, V1beta1VirtualMachineClusterPreferenceFromJSON, V1beta1VirtualMachineClusterPreferenceToJSON, V1beta1VirtualMachineClusterPreferenceListFromJSON, V1beta1VirtualMachineExportFromJSON, V1beta1VirtualMachineExportToJSON, V1beta1VirtualMachineExportListFromJSON, V1beta1VirtualMachineInstancetypeFromJSON, V1beta1VirtualMachineInstancetypeToJSON, V1beta1VirtualMachineInstancetypeListFromJSON, V1beta1VirtualMachinePreferenceFromJSON, V1beta1VirtualMachinePreferenceToJSON, V1beta1VirtualMachinePreferenceListFromJSON, V1beta1VirtualMachineRestoreFromJSON, V1beta1VirtualMachineRestoreToJSON, V1beta1VirtualMachineRestoreListFromJSON, V1beta1VirtualMachineSnapshotFromJSON, V1beta1VirtualMachineSnapshotToJSON, V1beta1VirtualMachineSnapshotContentFromJSON, V1beta1VirtualMachineSnapshotContentToJSON, V1beta1VirtualMachineSnapshotContentListFromJSON, V1beta1VirtualMachineSnapshotListFromJSON, } from '../models/index.js';
/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
    /**
     * Create a MigrationPolicy object.
     */
    createMigrationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createMigrationPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/migrations.kubevirt.io/v1alpha1/migrationpolicies`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1alpha1MigrationPolicyToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1MigrationPolicyFromJSON(jsonValue));
        });
    }
    /**
     * Create a MigrationPolicy object.
     */
    createMigrationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createMigrationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a KubeVirt object.
     */
    createNamespacedKubeVirtRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedKubeVirt().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedKubeVirt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/kubevirt`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1KubeVirtToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1KubeVirtFromJSON(jsonValue));
        });
    }
    /**
     * Create a KubeVirt object.
     */
    createNamespacedKubeVirt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedKubeVirtRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachine object.
     */
    createNamespacedVirtualMachineRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachine().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachine().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachines`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachine object.
     */
    createNamespacedVirtualMachine(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachineRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineExport object.
     */
    createNamespacedVirtualMachineExportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachineExport().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachineExport().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineexports`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineExportToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineExportFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineExport object.
     */
    createNamespacedVirtualMachineExport(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachineExportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineInstance object.
     */
    createNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachineInstance().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachineInstance().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineInstanceToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineInstance object.
     */
    createNamespacedVirtualMachineInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineInstanceMigration object.
     */
    createNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachineInstanceMigration().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachineInstanceMigration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineInstanceMigrationToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceMigrationFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineInstanceMigration object.
     */
    createNamespacedVirtualMachineInstanceMigration(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineInstancePreset object.
     */
    createNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachineInstancePreset().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachineInstancePreset().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancepresets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineInstancePresetToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstancePresetFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineInstancePreset object.
     */
    createNamespacedVirtualMachineInstancePreset(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineInstanceReplicaSet object.
     */
    createNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachineInstanceReplicaSet().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachineInstanceReplicaSet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancereplicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineInstanceReplicaSetToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineInstanceReplicaSet object.
     */
    createNamespacedVirtualMachineInstanceReplicaSet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineInstancetype object.
     */
    createNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachineInstancetype().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachineInstancetype().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineinstancetypes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineInstancetypeToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineInstancetypeFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineInstancetype object.
     */
    createNamespacedVirtualMachineInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachinePool object.
     */
    createNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachinePool().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachinePool().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/namespaces/{namespace}/virtualmachinepools`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1alpha1VirtualMachinePoolToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachinePoolFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachinePool object.
     */
    createNamespacedVirtualMachinePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachinePreference object.
     */
    createNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachinePreference().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachinePreference().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinepreferences`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachinePreferenceToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachinePreferenceFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachinePreference object.
     */
    createNamespacedVirtualMachinePreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineRestore object.
     */
    createNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachineRestore().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachineRestore().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinerestores`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineRestoreToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineRestoreFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineRestore object.
     */
    createNamespacedVirtualMachineRestore(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineSnapshot object.
     */
    createNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachineSnapshot().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachineSnapshot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshots`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineSnapshotToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineSnapshot object.
     */
    createNamespacedVirtualMachineSnapshot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineSnapshotContent object.
     */
    createNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling createNamespacedVirtualMachineSnapshotContent().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createNamespacedVirtualMachineSnapshotContent().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshotcontents`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineSnapshotContentToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotContentFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineSnapshotContent object.
     */
    createNamespacedVirtualMachineSnapshotContent(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineClone object.
     */
    createVirtualMachineCloneRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createVirtualMachineClone().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/clone.kubevirt.io/v1alpha1/virtualmachineclones`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1alpha1VirtualMachineCloneToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachineCloneFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineClone object.
     */
    createVirtualMachineClone(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createVirtualMachineCloneRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineClusterInstancetype object.
     */
    createVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createVirtualMachineClusterInstancetype().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterinstancetypes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineClusterInstancetypeToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineClusterInstancetypeFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineClusterInstancetype object.
     */
    createVirtualMachineClusterInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a VirtualMachineClusterPreference object.
     */
    createVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling createVirtualMachineClusterPreference().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterpreferences`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineClusterPreferenceToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineClusterPreferenceFromJSON(jsonValue));
        });
    }
    /**
     * Create a VirtualMachineClusterPreference object.
     */
    createVirtualMachineClusterPreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of MigrationPolicy objects.
     */
    deleteCollectionMigrationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/migrations.kubevirt.io/v1alpha1/migrationpolicies`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of MigrationPolicy objects.
     */
    deleteCollectionMigrationPolicy() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionMigrationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of KubeVirt objects.
     */
    deleteCollectionNamespacedKubeVirtRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/kubevirt`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of KubeVirt objects.
     */
    deleteCollectionNamespacedKubeVirt() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedKubeVirtRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachine objects.
     */
    deleteCollectionNamespacedVirtualMachineRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachines`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachine objects.
     */
    deleteCollectionNamespacedVirtualMachine() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachineRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineExport objects.
     */
    deleteCollectionNamespacedVirtualMachineExportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineexports`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineExport objects.
     */
    deleteCollectionNamespacedVirtualMachineExport() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachineExportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineInstance objects.
     */
    deleteCollectionNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineInstance objects.
     */
    deleteCollectionNamespacedVirtualMachineInstance() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineInstanceMigration objects.
     */
    deleteCollectionNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineInstanceMigration objects.
     */
    deleteCollectionNamespacedVirtualMachineInstanceMigration() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineInstancePreset objects.
     */
    deleteCollectionNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancepresets`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineInstancePreset objects.
     */
    deleteCollectionNamespacedVirtualMachineInstancePreset() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineInstanceReplicaSet objects.
     */
    deleteCollectionNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancereplicasets`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineInstanceReplicaSet objects.
     */
    deleteCollectionNamespacedVirtualMachineInstanceReplicaSet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineInstancetype objects.
     */
    deleteCollectionNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineinstancetypes`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineInstancetype objects.
     */
    deleteCollectionNamespacedVirtualMachineInstancetype() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachinePool objects.
     */
    deleteCollectionNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/namespaces/{namespace}/virtualmachinepools`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachinePool objects.
     */
    deleteCollectionNamespacedVirtualMachinePool() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachinePreference objects.
     */
    deleteCollectionNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinepreferences`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachinePreference objects.
     */
    deleteCollectionNamespacedVirtualMachinePreference() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineRestore objects.
     */
    deleteCollectionNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinerestores`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineRestore objects.
     */
    deleteCollectionNamespacedVirtualMachineRestore() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineSnapshot objects.
     */
    deleteCollectionNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshots`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineSnapshot objects.
     */
    deleteCollectionNamespacedVirtualMachineSnapshot() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineSnapshotContent objects.
     */
    deleteCollectionNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshotcontents`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineSnapshotContent objects.
     */
    deleteCollectionNamespacedVirtualMachineSnapshotContent() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineClone objects.
     */
    deleteCollectionVirtualMachineCloneRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/clone.kubevirt.io/v1alpha1/virtualmachineclones`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineClone objects.
     */
    deleteCollectionVirtualMachineClone() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionVirtualMachineCloneRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineClusterInstancetype objects.
     */
    deleteCollectionVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterinstancetypes`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineClusterInstancetype objects.
     */
    deleteCollectionVirtualMachineClusterInstancetype() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a collection of VirtualMachineClusterPreference objects.
     */
    deleteCollectionVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterpreferences`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a collection of VirtualMachineClusterPreference objects.
     */
    deleteCollectionVirtualMachineClusterPreference() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.deleteCollectionVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a MigrationPolicy object.
     */
    deleteMigrationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteMigrationPolicy().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteMigrationPolicy().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/migrations.kubevirt.io/v1alpha1/migrationpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a MigrationPolicy object.
     */
    deleteMigrationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteMigrationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a KubeVirt object.
     */
    deleteNamespacedKubeVirtRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedKubeVirt().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedKubeVirt().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedKubeVirt().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/kubevirt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a KubeVirt object.
     */
    deleteNamespacedKubeVirt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedKubeVirtRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachine object.
     */
    deleteNamespacedVirtualMachineRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachine().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachine().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachine().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachine object.
     */
    deleteNamespacedVirtualMachine(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachineRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineExport object.
     */
    deleteNamespacedVirtualMachineExportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachineExport().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachineExport().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachineExport().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineexports/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineExport object.
     */
    deleteNamespacedVirtualMachineExport(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachineExportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineInstance object.
     */
    deleteNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachineInstance().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachineInstance().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachineInstance().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineInstance object.
     */
    deleteNamespacedVirtualMachineInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineInstanceMigration object.
     */
    deleteNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachineInstanceMigration().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachineInstanceMigration().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachineInstanceMigration().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineInstanceMigration object.
     */
    deleteNamespacedVirtualMachineInstanceMigration(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineInstancePreset object.
     */
    deleteNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachineInstancePreset().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachineInstancePreset().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachineInstancePreset().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancepresets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineInstancePreset object.
     */
    deleteNamespacedVirtualMachineInstancePreset(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineInstanceReplicaSet object.
     */
    deleteNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachineInstanceReplicaSet().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachineInstanceReplicaSet().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachineInstanceReplicaSet().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancereplicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineInstanceReplicaSet object.
     */
    deleteNamespacedVirtualMachineInstanceReplicaSet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineInstancetype object.
     */
    deleteNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachineInstancetype().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachineInstancetype().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachineInstancetype().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineinstancetypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineInstancetype object.
     */
    deleteNamespacedVirtualMachineInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachinePool object.
     */
    deleteNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachinePool().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachinePool().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachinePool().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/namespaces/{namespace}/virtualmachinepools/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachinePool object.
     */
    deleteNamespacedVirtualMachinePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachinePreference object.
     */
    deleteNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachinePreference().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachinePreference().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachinePreference().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinepreferences/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachinePreference object.
     */
    deleteNamespacedVirtualMachinePreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineRestore object.
     */
    deleteNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachineRestore().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachineRestore().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachineRestore().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinerestores/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineRestore object.
     */
    deleteNamespacedVirtualMachineRestore(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineSnapshot object.
     */
    deleteNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachineSnapshot().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachineSnapshot().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachineSnapshot().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshots/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineSnapshot object.
     */
    deleteNamespacedVirtualMachineSnapshot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineSnapshotContent object.
     */
    deleteNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteNamespacedVirtualMachineSnapshotContent().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling deleteNamespacedVirtualMachineSnapshotContent().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteNamespacedVirtualMachineSnapshotContent().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshotcontents/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineSnapshotContent object.
     */
    deleteNamespacedVirtualMachineSnapshotContent(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineClone object.
     */
    deleteVirtualMachineCloneRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteVirtualMachineClone().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteVirtualMachineClone().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/clone.kubevirt.io/v1alpha1/virtualmachineclones/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineClone object.
     */
    deleteVirtualMachineClone(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteVirtualMachineCloneRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineClusterInstancetype object.
     */
    deleteVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteVirtualMachineClusterInstancetype().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteVirtualMachineClusterInstancetype().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterinstancetypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineClusterInstancetype object.
     */
    deleteVirtualMachineClusterInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a VirtualMachineClusterPreference object.
     */
    deleteVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteVirtualMachineClusterPreference().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling deleteVirtualMachineClusterPreference().');
            }
            const queryParameters = {};
            if (requestParameters['gracePeriodSeconds'] != null) {
                queryParameters['gracePeriodSeconds'] = requestParameters['gracePeriodSeconds'];
            }
            if (requestParameters['orphanDependents'] != null) {
                queryParameters['orphanDependents'] = requestParameters['orphanDependents'];
            }
            if (requestParameters['propagationPolicy'] != null) {
                queryParameters['propagationPolicy'] = requestParameters['propagationPolicy'];
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterpreferences/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
                body: K8sIoApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
        });
    }
    /**
     * Delete a VirtualMachineClusterPreference object.
     */
    deleteVirtualMachineClusterPreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.deleteVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Health endpoint
     */
    func13Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/healthz`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Health endpoint
     */
    func13(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.func13Raw(initOverrides);
        });
    }
    /**
     */
    func6Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/openapi/v2`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    func6(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.func6Raw(initOverrides);
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupCloneKubevirtIoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/clone.kubevirt.io/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupCloneKubevirtIo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIGroupCloneKubevirtIoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupExportKubevirtIoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupExportKubevirtIo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIGroupExportKubevirtIoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupInstancetypeKubevirtIoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupInstancetypeKubevirtIo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIGroupInstancetypeKubevirtIoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupKubevirtIoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupKubevirtIo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIGroupKubevirtIoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a KubeVirt API GroupList
     */
    getAPIGroupListRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIGroupListFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API GroupList
     */
    getAPIGroupList(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIGroupListRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupMigrationsKubevirtIoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/migrations.kubevirt.io/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupMigrationsKubevirtIo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIGroupMigrationsKubevirtIoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupPoolKubevirtIoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupPoolKubevirtIo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIGroupPoolKubevirtIoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupSnapshotKubevirtIoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API group
     */
    getAPIGroupSnapshotKubevirtIo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIGroupSnapshotKubevirtIoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesCloneKubevirtIoV1alpha1Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/clone.kubevirt.io/v1alpha1/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesCloneKubevirtIoV1alpha1(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIResourcesCloneKubevirtIoV1alpha1Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesExportKubevirtIoV1beta1Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesExportKubevirtIoV1beta1(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIResourcesExportKubevirtIoV1beta1Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesInstancetypeKubevirtIoV1beta1Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesInstancetypeKubevirtIoV1beta1(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIResourcesInstancetypeKubevirtIoV1beta1Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesKubevirtIoV1Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesKubevirtIoV1(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIResourcesKubevirtIoV1Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesMigrationsKubevirtIoV1alpha1Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/migrations.kubevirt.io/v1alpha1/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesMigrationsKubevirtIoV1alpha1(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIResourcesMigrationsKubevirtIoV1alpha1Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesPoolKubevirtIoV1alpha1Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesPoolKubevirtIoV1alpha1(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIResourcesPoolKubevirtIoV1alpha1Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesSnapshotKubevirtIoV1beta1Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * Get KubeVirt API Resources
     */
    getAPIResourcesSnapshotKubevirtIoV1beta1(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAPIResourcesSnapshotKubevirtIoV1beta1Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get KubeVirt API root paths
     */
    getRootPathsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1RootPathsFromJSON(jsonValue));
        });
    }
    /**
     * Get KubeVirt API root paths
     */
    getRootPaths(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRootPathsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * dump profiler results endpoint
     */
    handleDumpProfilerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/dump-profiler`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * dump profiler results endpoint
     */
    handleDumpProfiler(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.handleDumpProfilerRaw(initOverrides);
        });
    }
    /**
     * start profiler endpoint
     */
    handleStartProfilerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/start-profiler`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * start profiler endpoint
     */
    handleStartProfiler(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.handleStartProfilerRaw(initOverrides);
        });
    }
    /**
     * stop profiler endpoint
     */
    handleStopProfilerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/stop-profiler`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * stop profiler endpoint
     */
    handleStopProfiler(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.handleStopProfilerRaw(initOverrides);
        });
    }
    /**
     * Get a list of all KubeVirt objects.
     */
    listKubeVirtForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/kubevirt`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1KubeVirtListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all KubeVirt objects.
     */
    listKubeVirtForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listKubeVirtForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of MigrationPolicy objects.
     */
    listMigrationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/migrations.kubevirt.io/v1alpha1/migrationpolicies`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1MigrationPolicyListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of MigrationPolicy objects.
     */
    listMigrationPolicy() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listMigrationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of KubeVirt objects.
     */
    listNamespacedKubeVirtRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedKubeVirt().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/kubevirt`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1KubeVirtListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of KubeVirt objects.
     */
    listNamespacedKubeVirt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedKubeVirtRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachine objects.
     */
    listNamespacedVirtualMachineRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachine().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachines`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachine objects.
     */
    listNamespacedVirtualMachine(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachineRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineExport objects.
     */
    listNamespacedVirtualMachineExportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachineExport().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineexports`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineExportListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineExport objects.
     */
    listNamespacedVirtualMachineExport(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachineExportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineInstance objects.
     */
    listNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachineInstance().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineInstance objects.
     */
    listNamespacedVirtualMachineInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineInstanceMigration objects.
     */
    listNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachineInstanceMigration().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceMigrationListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineInstanceMigration objects.
     */
    listNamespacedVirtualMachineInstanceMigration(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineInstancePreset objects.
     */
    listNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachineInstancePreset().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancepresets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstancePresetListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineInstancePreset objects.
     */
    listNamespacedVirtualMachineInstancePreset(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineInstanceReplicaSet objects.
     */
    listNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachineInstanceReplicaSet().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancereplicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceReplicaSetListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineInstanceReplicaSet objects.
     */
    listNamespacedVirtualMachineInstanceReplicaSet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineInstancetype objects.
     */
    listNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachineInstancetype().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineinstancetypes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineInstancetypeListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineInstancetype objects.
     */
    listNamespacedVirtualMachineInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachinePool objects.
     */
    listNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachinePool().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/namespaces/{namespace}/virtualmachinepools`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachinePoolListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachinePool objects.
     */
    listNamespacedVirtualMachinePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachinePreference objects.
     */
    listNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachinePreference().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinepreferences`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachinePreferenceListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachinePreference objects.
     */
    listNamespacedVirtualMachinePreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineRestore objects.
     */
    listNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachineRestore().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinerestores`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineRestoreListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineRestore objects.
     */
    listNamespacedVirtualMachineRestore(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineSnapshot objects.
     */
    listNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachineSnapshot().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshots`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineSnapshot objects.
     */
    listNamespacedVirtualMachineSnapshot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineSnapshotContent objects.
     */
    listNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling listNamespacedVirtualMachineSnapshotContent().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshotcontents`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotContentListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineSnapshotContent objects.
     */
    listNamespacedVirtualMachineSnapshotContent(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineClone objects.
     */
    listVirtualMachineCloneRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/clone.kubevirt.io/v1alpha1/virtualmachineclones`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachineCloneListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineClone objects.
     */
    listVirtualMachineClone() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineCloneRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineClusterInstancetype objects.
     */
    listVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterinstancetypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineClusterInstancetypeListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineClusterInstancetype objects.
     */
    listVirtualMachineClusterInstancetype() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of VirtualMachineClusterPreference objects.
     */
    listVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterpreferences`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineClusterPreferenceListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of VirtualMachineClusterPreference objects.
     */
    listVirtualMachineClusterPreference() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachineExport objects.
     */
    listVirtualMachineExportForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/virtualmachineexports`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineExportListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachineExport objects.
     */
    listVirtualMachineExportForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineExportForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachine objects.
     */
    listVirtualMachineForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/virtualmachines`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachine objects.
     */
    listVirtualMachineForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachineInstance objects.
     */
    listVirtualMachineInstanceForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/virtualmachineinstances`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachineInstance objects.
     */
    listVirtualMachineInstanceForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineInstanceForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachineInstanceMigration objects.
     */
    listVirtualMachineInstanceMigrationForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/virtualmachineinstancemigrations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceMigrationListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachineInstanceMigration objects.
     */
    listVirtualMachineInstanceMigrationForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineInstanceMigrationForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachineInstancePreset objects.
     */
    listVirtualMachineInstancePresetForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/virtualmachineinstancepresets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstancePresetListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachineInstancePreset objects.
     */
    listVirtualMachineInstancePresetForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineInstancePresetForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachineInstanceReplicaSet objects.
     */
    listVirtualMachineInstanceReplicaSetForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/virtualmachineinstancereplicasets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceReplicaSetListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachineInstanceReplicaSet objects.
     */
    listVirtualMachineInstanceReplicaSetForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineInstanceReplicaSetForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachineInstancetype objects.
     */
    listVirtualMachineInstancetypeForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineinstancetypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineInstancetypeListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachineInstancetype objects.
     */
    listVirtualMachineInstancetypeForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineInstancetypeForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachinePool objects.
     */
    listVirtualMachinePoolForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/virtualmachinepools`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachinePoolListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachinePool objects.
     */
    listVirtualMachinePoolForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachinePoolForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachinePreference objects.
     */
    listVirtualMachinePreferenceForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachinepreferences`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachinePreferenceListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachinePreference objects.
     */
    listVirtualMachinePreferenceForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachinePreferenceForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachineRestore objects.
     */
    listVirtualMachineRestoreForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/virtualmachinerestores`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineRestoreListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachineRestore objects.
     */
    listVirtualMachineRestoreForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineRestoreForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachineSnapshotContent objects.
     */
    listVirtualMachineSnapshotContentForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/virtualmachinesnapshotcontents`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotContentListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachineSnapshotContent objects.
     */
    listVirtualMachineSnapshotContentForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineSnapshotContentForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all VirtualMachineSnapshot objects.
     */
    listVirtualMachineSnapshotForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/virtualmachinesnapshots`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotListFromJSON(jsonValue));
        });
    }
    /**
     * Get a list of all VirtualMachineSnapshot objects.
     */
    listVirtualMachineSnapshotForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listVirtualMachineSnapshotForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a MigrationPolicy object.
     */
    patchMigrationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchMigrationPolicy().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchMigrationPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/migrations.kubevirt.io/v1alpha1/migrationpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1MigrationPolicyFromJSON(jsonValue));
        });
    }
    /**
     * Patch a MigrationPolicy object.
     */
    patchMigrationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchMigrationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a KubeVirt object.
     */
    patchNamespacedKubeVirtRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedKubeVirt().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedKubeVirt().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedKubeVirt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/kubevirt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1KubeVirtFromJSON(jsonValue));
        });
    }
    /**
     * Patch a KubeVirt object.
     */
    patchNamespacedKubeVirt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedKubeVirtRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachine object.
     */
    patchNamespacedVirtualMachineRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachine().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachine().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachine().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachine object.
     */
    patchNamespacedVirtualMachine(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachineRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineExport object.
     */
    patchNamespacedVirtualMachineExportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachineExport().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachineExport().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachineExport().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineexports/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineExportFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineExport object.
     */
    patchNamespacedVirtualMachineExport(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachineExportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineInstance object.
     */
    patchNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachineInstance().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachineInstance().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachineInstance().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineInstance object.
     */
    patchNamespacedVirtualMachineInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineInstanceMigration object.
     */
    patchNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachineInstanceMigration().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachineInstanceMigration().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachineInstanceMigration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceMigrationFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineInstanceMigration object.
     */
    patchNamespacedVirtualMachineInstanceMigration(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineInstancePreset object.
     */
    patchNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachineInstancePreset().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachineInstancePreset().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachineInstancePreset().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancepresets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstancePresetFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineInstancePreset object.
     */
    patchNamespacedVirtualMachineInstancePreset(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineInstanceReplicaSet object.
     */
    patchNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachineInstanceReplicaSet().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachineInstanceReplicaSet().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachineInstanceReplicaSet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancereplicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineInstanceReplicaSet object.
     */
    patchNamespacedVirtualMachineInstanceReplicaSet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineInstancetype object.
     */
    patchNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachineInstancetype().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachineInstancetype().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachineInstancetype().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineinstancetypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineInstancetypeFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineInstancetype object.
     */
    patchNamespacedVirtualMachineInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachinePool object.
     */
    patchNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachinePool().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachinePool().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachinePool().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/namespaces/{namespace}/virtualmachinepools/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachinePoolFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachinePool object.
     */
    patchNamespacedVirtualMachinePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachinePreference object.
     */
    patchNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachinePreference().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachinePreference().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachinePreference().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinepreferences/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachinePreferenceFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachinePreference object.
     */
    patchNamespacedVirtualMachinePreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineRestore object.
     */
    patchNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachineRestore().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachineRestore().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachineRestore().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinerestores/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineRestoreFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineRestore object.
     */
    patchNamespacedVirtualMachineRestore(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineSnapshot object.
     */
    patchNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachineSnapshot().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachineSnapshot().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachineSnapshot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshots/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineSnapshot object.
     */
    patchNamespacedVirtualMachineSnapshot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineSnapshotContent object.
     */
    patchNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchNamespacedVirtualMachineSnapshotContent().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling patchNamespacedVirtualMachineSnapshotContent().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchNamespacedVirtualMachineSnapshotContent().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshotcontents/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotContentFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineSnapshotContent object.
     */
    patchNamespacedVirtualMachineSnapshotContent(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineClone object.
     */
    patchVirtualMachineCloneRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchVirtualMachineClone().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchVirtualMachineClone().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/clone.kubevirt.io/v1alpha1/virtualmachineclones/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachineCloneFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineClone object.
     */
    patchVirtualMachineClone(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchVirtualMachineCloneRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineClusterInstancetype object.
     */
    patchVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchVirtualMachineClusterInstancetype().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchVirtualMachineClusterInstancetype().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterinstancetypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineClusterInstancetypeFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineClusterInstancetype object.
     */
    patchVirtualMachineClusterInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Patch a VirtualMachineClusterPreference object.
     */
    patchVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling patchVirtualMachineClusterPreference().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling patchVirtualMachineClusterPreference().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json-patch+json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterpreferences/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineClusterPreferenceFromJSON(jsonValue));
        });
    }
    /**
     * Patch a VirtualMachineClusterPreference object.
     */
    patchVirtualMachineClusterPreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.patchVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a MigrationPolicy object.
     */
    readMigrationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readMigrationPolicy().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/migrations.kubevirt.io/v1alpha1/migrationpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1MigrationPolicyFromJSON(jsonValue));
        });
    }
    /**
     * Get a MigrationPolicy object.
     */
    readMigrationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readMigrationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a KubeVirt object.
     */
    readNamespacedKubeVirtRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedKubeVirt().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedKubeVirt().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/kubevirt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1KubeVirtFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt object.
     */
    readNamespacedKubeVirt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedKubeVirtRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachine object.
     */
    readNamespacedVirtualMachineRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachine().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachine().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachine object.
     */
    readNamespacedVirtualMachine(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachineRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineExport object.
     */
    readNamespacedVirtualMachineExportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachineExport().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachineExport().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineexports/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineExportFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineExport object.
     */
    readNamespacedVirtualMachineExport(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachineExportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineInstance object.
     */
    readNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachineInstance().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachineInstance().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineInstance object.
     */
    readNamespacedVirtualMachineInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineInstanceMigration object.
     */
    readNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachineInstanceMigration().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachineInstanceMigration().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceMigrationFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineInstanceMigration object.
     */
    readNamespacedVirtualMachineInstanceMigration(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineInstancePreset object.
     */
    readNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachineInstancePreset().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachineInstancePreset().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancepresets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstancePresetFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineInstancePreset object.
     */
    readNamespacedVirtualMachineInstancePreset(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineInstanceReplicaSet object.
     */
    readNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachineInstanceReplicaSet().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachineInstanceReplicaSet().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancereplicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineInstanceReplicaSet object.
     */
    readNamespacedVirtualMachineInstanceReplicaSet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineInstancetype object.
     */
    readNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachineInstancetype().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachineInstancetype().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineinstancetypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineInstancetypeFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineInstancetype object.
     */
    readNamespacedVirtualMachineInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachinePool object.
     */
    readNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachinePool().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachinePool().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/namespaces/{namespace}/virtualmachinepools/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachinePoolFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachinePool object.
     */
    readNamespacedVirtualMachinePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachinePreference object.
     */
    readNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachinePreference().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachinePreference().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinepreferences/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachinePreferenceFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachinePreference object.
     */
    readNamespacedVirtualMachinePreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineRestore object.
     */
    readNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachineRestore().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachineRestore().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinerestores/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineRestoreFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineRestore object.
     */
    readNamespacedVirtualMachineRestore(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineSnapshot object.
     */
    readNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachineSnapshot().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachineSnapshot().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshots/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineSnapshot object.
     */
    readNamespacedVirtualMachineSnapshot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineSnapshotContent object.
     */
    readNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readNamespacedVirtualMachineSnapshotContent().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling readNamespacedVirtualMachineSnapshotContent().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshotcontents/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotContentFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineSnapshotContent object.
     */
    readNamespacedVirtualMachineSnapshotContent(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineClone object.
     */
    readVirtualMachineCloneRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readVirtualMachineClone().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/clone.kubevirt.io/v1alpha1/virtualmachineclones/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachineCloneFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineClone object.
     */
    readVirtualMachineClone(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readVirtualMachineCloneRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineClusterInstancetype object.
     */
    readVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readVirtualMachineClusterInstancetype().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterinstancetypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineClusterInstancetypeFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineClusterInstancetype object.
     */
    readVirtualMachineClusterInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a VirtualMachineClusterPreference object.
     */
    readVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling readVirtualMachineClusterPreference().');
            }
            const queryParameters = {};
            if (requestParameters['exact'] != null) {
                queryParameters['exact'] = requestParameters['exact'];
            }
            if (requestParameters['_export'] != null) {
                queryParameters['export'] = requestParameters['_export'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterpreferences/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineClusterPreferenceFromJSON(jsonValue));
        });
    }
    /**
     * Get a VirtualMachineClusterPreference object.
     */
    readVirtualMachineClusterPreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.readVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a MigrationPolicy object.
     */
    replaceMigrationPolicyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceMigrationPolicy().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceMigrationPolicy().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/migrations.kubevirt.io/v1alpha1/migrationpolicies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1alpha1MigrationPolicyToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1MigrationPolicyFromJSON(jsonValue));
        });
    }
    /**
     * Update a MigrationPolicy object.
     */
    replaceMigrationPolicy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceMigrationPolicyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a KubeVirt object.
     */
    replaceNamespacedKubeVirtRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedKubeVirt().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedKubeVirt().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedKubeVirt().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/kubevirt/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1KubeVirtToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1KubeVirtFromJSON(jsonValue));
        });
    }
    /**
     * Update a KubeVirt object.
     */
    replaceNamespacedKubeVirt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedKubeVirtRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachine object.
     */
    replaceNamespacedVirtualMachineRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachine().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachine().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachine().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachine object.
     */
    replaceNamespacedVirtualMachine(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachineRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineExport object.
     */
    replaceNamespacedVirtualMachineExportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachineExport().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachineExport().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachineExport().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineexports/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineExportToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineExportFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineExport object.
     */
    replaceNamespacedVirtualMachineExport(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachineExportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineInstance object.
     */
    replaceNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachineInstance().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachineInstance().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachineInstance().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineInstanceToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineInstance object.
     */
    replaceNamespacedVirtualMachineInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineInstanceMigration object.
     */
    replaceNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachineInstanceMigration().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachineInstanceMigration().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachineInstanceMigration().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineInstanceMigrationToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceMigrationFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineInstanceMigration object.
     */
    replaceNamespacedVirtualMachineInstanceMigration(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineInstancePreset object.
     */
    replaceNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachineInstancePreset().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachineInstancePreset().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachineInstancePreset().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancepresets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineInstancePresetToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstancePresetFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineInstancePreset object.
     */
    replaceNamespacedVirtualMachineInstancePreset(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineInstanceReplicaSet object.
     */
    replaceNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachineInstanceReplicaSet().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachineInstanceReplicaSet().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachineInstanceReplicaSet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancereplicasets/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineInstanceReplicaSetToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceReplicaSetFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineInstanceReplicaSet object.
     */
    replaceNamespacedVirtualMachineInstanceReplicaSet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineInstancetype object.
     */
    replaceNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachineInstancetype().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachineInstancetype().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachineInstancetype().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachineinstancetypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineInstancetypeToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineInstancetypeFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineInstancetype object.
     */
    replaceNamespacedVirtualMachineInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachinePool object.
     */
    replaceNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachinePool().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachinePool().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachinePool().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/namespaces/{namespace}/virtualmachinepools/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1alpha1VirtualMachinePoolToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachinePoolFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachinePool object.
     */
    replaceNamespacedVirtualMachinePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachinePreference object.
     */
    replaceNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachinePreference().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachinePreference().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachinePreference().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinepreferences/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachinePreferenceToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachinePreferenceFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachinePreference object.
     */
    replaceNamespacedVirtualMachinePreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineRestore object.
     */
    replaceNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachineRestore().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachineRestore().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachineRestore().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinerestores/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineRestoreToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineRestoreFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineRestore object.
     */
    replaceNamespacedVirtualMachineRestore(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineSnapshot object.
     */
    replaceNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachineSnapshot().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachineSnapshot().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachineSnapshot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshots/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineSnapshotToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineSnapshot object.
     */
    replaceNamespacedVirtualMachineSnapshot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineSnapshotContent object.
     */
    replaceNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceNamespacedVirtualMachineSnapshotContent().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling replaceNamespacedVirtualMachineSnapshotContent().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceNamespacedVirtualMachineSnapshotContent().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/namespaces/{namespace}/virtualmachinesnapshotcontents/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineSnapshotContentToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineSnapshotContentFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineSnapshotContent object.
     */
    replaceNamespacedVirtualMachineSnapshotContent(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineClone object.
     */
    replaceVirtualMachineCloneRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceVirtualMachineClone().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceVirtualMachineClone().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/clone.kubevirt.io/v1alpha1/virtualmachineclones/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1alpha1VirtualMachineCloneToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1VirtualMachineCloneFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineClone object.
     */
    replaceVirtualMachineClone(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceVirtualMachineCloneRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineClusterInstancetype object.
     */
    replaceVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceVirtualMachineClusterInstancetype().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceVirtualMachineClusterInstancetype().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterinstancetypes/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineClusterInstancetypeToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineClusterInstancetypeFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineClusterInstancetype object.
     */
    replaceVirtualMachineClusterInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceVirtualMachineClusterInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a VirtualMachineClusterPreference object.
     */
    replaceVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling replaceVirtualMachineClusterPreference().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling replaceVirtualMachineClusterPreference().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/virtualmachineclusterpreferences/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1beta1VirtualMachineClusterPreferenceToJSON(requestParameters['body']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1VirtualMachineClusterPreferenceFromJSON(jsonValue));
        });
    }
    /**
     * Update a VirtualMachineClusterPreference object.
     */
    replaceVirtualMachineClusterPreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.replaceVirtualMachineClusterPreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Health endpoint
     */
    v1CheckHealthRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/healthz`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Health endpoint
     */
    v1CheckHealth(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1CheckHealthRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Open a websocket connection to a serial console on the specified VirtualMachineInstance.
     */
    v1ConsoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Console().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Console().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/console`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection to a serial console on the specified VirtualMachineInstance.
     */
    v1Console(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1ConsoleRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Expands instancetype and preference into the passed VirtualMachine object.
     */
    v1ExpandSpecRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1ExpandSpec().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/expand-vm-spec`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Expands instancetype and preference into the passed VirtualMachine object.
     */
    v1ExpandSpec(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1ExpandSpecRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get list of active filesystems on guest machine via guest agent
     */
    v1FilesystemlistRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Filesystemlist().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Filesystemlist().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/filesystemlist`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceFileSystemListFromJSON(jsonValue));
        });
    }
    /**
     * Get list of active filesystems on guest machine via guest agent
     */
    v1Filesystemlist(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1FilesystemlistRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Freeze a VirtualMachineInstance object.
     */
    v1FreezeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Freeze().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Freeze().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1Freeze().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/freeze`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1FreezeUnfreezeTimeoutToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Freeze a VirtualMachineInstance object.
     */
    v1Freeze(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1FreezeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a KubeVirt API Group
     */
    v1GetSubAPIGroupRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIGroupFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API Group
     */
    v1GetSubAPIGroup(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1GetSubAPIGroupRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    v1GuestfsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/guestfs`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     */
    v1Guestfs(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1GuestfsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get guest agent os information
     */
    v1GuestosinfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Guestosinfo().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Guestosinfo().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/guestosinfo`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceGuestAgentInfoFromJSON(jsonValue));
        });
    }
    /**
     * Get guest agent os information
     */
    v1Guestosinfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1GuestosinfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Dumps a VirtualMachineInstance memory.
     */
    v1MemoryDumpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1MemoryDump().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1MemoryDump().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1MemoryDump().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/memorydump`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineMemoryDumpRequestToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Dumps a VirtualMachineInstance memory.
     */
    v1MemoryDump(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1MemoryDumpRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Migrate a running VirtualMachine to another node.
     */
    v1MigrateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Migrate().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Migrate().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1Migrate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/migrate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1MigrateOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Migrate a running VirtualMachine to another node.
     */
    v1Migrate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1MigrateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Pause a VirtualMachineInstance object.
     */
    v1PauseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Pause().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Pause().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1Pause().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/pause`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1PauseOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Pause a VirtualMachineInstance object.
     */
    v1Pause(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1PauseRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove memory dump association.
     */
    v1RemoveMemoryDumpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1RemoveMemoryDump().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1RemoveMemoryDump().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/removememorydump`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Remove memory dump association.
     */
    v1RemoveMemoryDump(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1RemoveMemoryDumpRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Restart a VirtualMachine object.
     */
    v1RestartRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Restart().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Restart().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/restart`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1RestartOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Restart a VirtualMachine object.
     */
    v1Restart(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1RestartRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch SEV certificate chain from the node where Virtual Machine is scheduled
     */
    v1SEVFetchCertChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1SEVFetchCertChain().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1SEVFetchCertChain().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/sev/fetchcertchain`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1SEVPlatformInfoFromJSON(jsonValue));
        });
    }
    /**
     * Fetch SEV certificate chain from the node where Virtual Machine is scheduled
     */
    v1SEVFetchCertChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1SEVFetchCertChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Inject SEV launch secret into a Virtual Machine
     */
    v1SEVInjectLaunchSecretRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1SEVInjectLaunchSecret().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1SEVInjectLaunchSecret().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1SEVInjectLaunchSecret().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/sev/injectlaunchsecret`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1SEVSecretOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Inject SEV launch secret into a Virtual Machine
     */
    v1SEVInjectLaunchSecret(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1SEVInjectLaunchSecretRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Query SEV launch measurement from a Virtual Machine
     */
    v1SEVQueryLaunchMeasurementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1SEVQueryLaunchMeasurement().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1SEVQueryLaunchMeasurement().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/sev/querylaunchmeasurement`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1SEVMeasurementInfoFromJSON(jsonValue));
        });
    }
    /**
     * Query SEV launch measurement from a Virtual Machine
     */
    v1SEVQueryLaunchMeasurement(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1SEVQueryLaunchMeasurementRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Setup SEV session parameters for a Virtual Machine
     */
    v1SEVSetupSessionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1SEVSetupSession().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1SEVSetupSession().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1SEVSetupSession().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/sev/setupsession`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1SEVSessionOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Setup SEV session parameters for a Virtual Machine
     */
    v1SEVSetupSession(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1SEVSetupSessionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Soft reboot a VirtualMachineInstance object.
     */
    v1SoftRebootRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1SoftReboot().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1SoftReboot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/softreboot`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Soft reboot a VirtualMachineInstance object.
     */
    v1SoftReboot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1SoftRebootRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Start a VirtualMachine object.
     */
    v1StartRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Start().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Start().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1Start().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/start`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1StartOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Start a VirtualMachine object.
     */
    v1Start(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1StartRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Stop a VirtualMachine object.
     */
    v1StopRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Stop().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Stop().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/stop`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1StopOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Stop a VirtualMachine object.
     */
    v1Stop(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1StopRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unfreeze a VirtualMachineInstance object.
     */
    v1UnfreezeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Unfreeze().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Unfreeze().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/unfreeze`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Unfreeze a VirtualMachineInstance object.
     */
    v1Unfreeze(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1UnfreezeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unpause a VirtualMachineInstance object.
     */
    v1UnpauseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Unpause().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Unpause().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1Unpause().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/unpause`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1UnpauseOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Unpause a VirtualMachineInstance object.
     */
    v1Unpause(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1UnpauseRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get list of active users via guest agent
     */
    v1UserlistRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1Userlist().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1Userlist().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/userlist`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceGuestOSUserListFromJSON(jsonValue));
        });
    }
    /**
     * Get list of active users via guest agent
     */
    v1Userlist(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1UserlistRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Open a websocket connection to connect to VNC on the specified VirtualMachineInstance.
     */
    v1VNCRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1VNC().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1VNC().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/vnc`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection to connect to VNC on the specified VirtualMachineInstance.
     */
    v1VNC(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1VNCRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get a PNG VNC screenshot of the specified VirtualMachineInstance.
     */
    v1VNCScreenshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1VNCScreenshot().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1VNCScreenshot().');
            }
            const queryParameters = {};
            if (requestParameters['moveCursor'] != null) {
                queryParameters['moveCursor'] = requestParameters['moveCursor'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/vnc/screenshot`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get a PNG VNC screenshot of the specified VirtualMachineInstance.
     */
    v1VNCScreenshot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1VNCScreenshotRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port via VSOCK.
     */
    v1VSOCKRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1VSOCK().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1VSOCK().');
            }
            if (requestParameters['port'] == null) {
                throw new runtime.RequiredError('port', 'Required parameter "port" was null or undefined when calling v1VSOCK().');
            }
            const queryParameters = {};
            if (requestParameters['port'] != null) {
                queryParameters['port'] = requestParameters['port'];
            }
            if (requestParameters['tls'] != null) {
                queryParameters['tls'] = requestParameters['tls'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/vsock`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port via VSOCK.
     */
    v1VSOCK(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1VSOCKRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    v1VersionRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/version`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    v1Version(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1VersionRaw(initOverrides);
        });
    }
    /**
     * Health endpoint
     */
    v1alpha3CheckHealthRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/healthz`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Health endpoint
     */
    v1alpha3CheckHealth(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3CheckHealthRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Open a websocket connection to a serial console on the specified VirtualMachineInstance.
     */
    v1alpha3ConsoleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Console().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Console().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/console`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection to a serial console on the specified VirtualMachineInstance.
     */
    v1alpha3Console(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3ConsoleRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Expands instancetype and preference into the passed VirtualMachine object.
     */
    v1alpha3ExpandSpecRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3ExpandSpec().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/expand-vm-spec`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Expands instancetype and preference into the passed VirtualMachine object.
     */
    v1alpha3ExpandSpec(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3ExpandSpecRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get list of active filesystems on guest machine via guest agent
     */
    v1alpha3FilesystemlistRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Filesystemlist().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Filesystemlist().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/filesystemlist`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceFileSystemListFromJSON(jsonValue));
        });
    }
    /**
     * Get list of active filesystems on guest machine via guest agent
     */
    v1alpha3Filesystemlist(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3FilesystemlistRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Freeze a VirtualMachineInstance object.
     */
    v1alpha3FreezeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Freeze().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Freeze().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3Freeze().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/freeze`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1FreezeUnfreezeTimeoutToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Freeze a VirtualMachineInstance object.
     */
    v1alpha3Freeze(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3FreezeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    v1alpha3GuestfsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/guestfs`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     */
    v1alpha3Guestfs(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3GuestfsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get guest agent os information
     */
    v1alpha3GuestosinfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Guestosinfo().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Guestosinfo().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/guestosinfo`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceGuestAgentInfoFromJSON(jsonValue));
        });
    }
    /**
     * Get guest agent os information
     */
    v1alpha3Guestosinfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3GuestosinfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Dumps a VirtualMachineInstance memory.
     */
    v1alpha3MemoryDumpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3MemoryDump().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3MemoryDump().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3MemoryDump().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/memorydump`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1VirtualMachineMemoryDumpRequestToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Dumps a VirtualMachineInstance memory.
     */
    v1alpha3MemoryDump(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3MemoryDumpRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Migrate a running VirtualMachine to another node.
     */
    v1alpha3MigrateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Migrate().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Migrate().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3Migrate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/migrate`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1MigrateOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Migrate a running VirtualMachine to another node.
     */
    v1alpha3Migrate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3MigrateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Pause a VirtualMachineInstance object.
     */
    v1alpha3PauseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Pause().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Pause().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3Pause().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/pause`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1PauseOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Pause a VirtualMachineInstance object.
     */
    v1alpha3Pause(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3PauseRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove memory dump association.
     */
    v1alpha3RemoveMemoryDumpRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3RemoveMemoryDump().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3RemoveMemoryDump().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/removememorydump`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Remove memory dump association.
     */
    v1alpha3RemoveMemoryDump(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3RemoveMemoryDumpRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Restart a VirtualMachine object.
     */
    v1alpha3RestartRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Restart().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Restart().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/restart`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1RestartOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Restart a VirtualMachine object.
     */
    v1alpha3Restart(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3RestartRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch SEV certificate chain from the node where Virtual Machine is scheduled
     */
    v1alpha3SEVFetchCertChainRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3SEVFetchCertChain().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3SEVFetchCertChain().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/sev/fetchcertchain`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1SEVPlatformInfoFromJSON(jsonValue));
        });
    }
    /**
     * Fetch SEV certificate chain from the node where Virtual Machine is scheduled
     */
    v1alpha3SEVFetchCertChain(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3SEVFetchCertChainRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Inject SEV launch secret into a Virtual Machine
     */
    v1alpha3SEVInjectLaunchSecretRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3SEVInjectLaunchSecret().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3SEVInjectLaunchSecret().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3SEVInjectLaunchSecret().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/sev/injectlaunchsecret`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1SEVSecretOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Inject SEV launch secret into a Virtual Machine
     */
    v1alpha3SEVInjectLaunchSecret(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3SEVInjectLaunchSecretRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Query SEV launch measurement from a Virtual Machine
     */
    v1alpha3SEVQueryLaunchMeasurementRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3SEVQueryLaunchMeasurement().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3SEVQueryLaunchMeasurement().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/sev/querylaunchmeasurement`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1SEVMeasurementInfoFromJSON(jsonValue));
        });
    }
    /**
     * Query SEV launch measurement from a Virtual Machine
     */
    v1alpha3SEVQueryLaunchMeasurement(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3SEVQueryLaunchMeasurementRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Setup SEV session parameters for a Virtual Machine
     */
    v1alpha3SEVSetupSessionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3SEVSetupSession().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3SEVSetupSession().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3SEVSetupSession().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/sev/setupsession`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1SEVSessionOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Setup SEV session parameters for a Virtual Machine
     */
    v1alpha3SEVSetupSession(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3SEVSetupSessionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Soft reboot a VirtualMachineInstance object.
     */
    v1alpha3SoftRebootRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3SoftReboot().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3SoftReboot().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/softreboot`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Soft reboot a VirtualMachineInstance object.
     */
    v1alpha3SoftReboot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3SoftRebootRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Start a VirtualMachine object.
     */
    v1alpha3StartRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Start().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Start().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3Start().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/start`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1StartOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Start a VirtualMachine object.
     */
    v1alpha3Start(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3StartRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Stop a VirtualMachine object.
     */
    v1alpha3StopRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Stop().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Stop().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/stop`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1StopOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Stop a VirtualMachine object.
     */
    v1alpha3Stop(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3StopRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unfreeze a VirtualMachineInstance object.
     */
    v1alpha3UnfreezeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Unfreeze().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Unfreeze().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/unfreeze`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Unfreeze a VirtualMachineInstance object.
     */
    v1alpha3Unfreeze(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3UnfreezeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unpause a VirtualMachineInstance object.
     */
    v1alpha3UnpauseRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Unpause().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Unpause().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3Unpause().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/unpause`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1UnpauseOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Unpause a VirtualMachineInstance object.
     */
    v1alpha3Unpause(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3UnpauseRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get list of active users via guest agent
     */
    v1alpha3UserlistRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3Userlist().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3Userlist().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/userlist`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => V1VirtualMachineInstanceGuestOSUserListFromJSON(jsonValue));
        });
    }
    /**
     * Get list of active users via guest agent
     */
    v1alpha3Userlist(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3UserlistRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Open a websocket connection to connect to VNC on the specified VirtualMachineInstance.
     */
    v1alpha3VNCRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3VNC().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3VNC().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/vnc`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection to connect to VNC on the specified VirtualMachineInstance.
     */
    v1alpha3VNC(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3VNCRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get a PNG VNC screenshot of the specified VirtualMachineInstance.
     */
    v1alpha3VNCScreenshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3VNCScreenshot().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3VNCScreenshot().');
            }
            const queryParameters = {};
            if (requestParameters['moveCursor'] != null) {
                queryParameters['moveCursor'] = requestParameters['moveCursor'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/vnc/screenshot`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get a PNG VNC screenshot of the specified VirtualMachineInstance.
     */
    v1alpha3VNCScreenshot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3VNCScreenshotRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port via VSOCK.
     */
    v1alpha3VSOCKRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3VSOCK().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3VSOCK().');
            }
            if (requestParameters['port'] == null) {
                throw new runtime.RequiredError('port', 'Required parameter "port" was null or undefined when calling v1alpha3VSOCK().');
            }
            const queryParameters = {};
            if (requestParameters['port'] != null) {
                queryParameters['port'] = requestParameters['port'];
            }
            if (requestParameters['tls'] != null) {
                queryParameters['tls'] = requestParameters['tls'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/vsock`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port via VSOCK.
     */
    v1alpha3VSOCK(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3VSOCKRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    v1alpha3VersionRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/version`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    v1alpha3Version(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3VersionRaw(initOverrides);
        });
    }
    /**
     */
    v1alpha3dumpClusterProfilerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/dump-cluster-profiler`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    v1alpha3dumpClusterProfiler(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3dumpClusterProfilerRaw(initOverrides);
        });
    }
    /**
     * Get a KubeVirt API resources
     */
    v1alpha3getAPISubResourcesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API resources
     */
    v1alpha3getAPISubResources(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3getAPISubResourcesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    v1alpha3startClusterProfilerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/start-cluster-profiler`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    v1alpha3startClusterProfiler(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3startClusterProfilerRaw(initOverrides);
        });
    }
    /**
     */
    v1alpha3stopClusterProfilerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/stop-cluster-profiler`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    v1alpha3stopClusterProfiler(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3stopClusterProfilerRaw(initOverrides);
        });
    }
    /**
     * Open a websocket connection to connect to USB device on the specified VirtualMachineInstance.
     */
    v1alpha3usbredirRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3usbredir().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3usbredir().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/usbredir`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection to connect to USB device on the specified VirtualMachineInstance.
     */
    v1alpha3usbredir(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3usbredirRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Add a volume and disk to a running Virtual Machine.
     */
    v1alpha3vmAddvolumeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3vmAddvolume().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3vmAddvolume().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3vmAddvolume().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/addvolume`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1AddVolumeOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Add a volume and disk to a running Virtual Machine.
     */
    v1alpha3vmAddvolume(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3vmAddvolumeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get VirtualMachine object with expanded instancetype and preference.
     */
    v1alpha3vmExpandSpecRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3vmExpandSpec().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3vmExpandSpec().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/expand-spec`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Get VirtualMachine object with expanded instancetype and preference.
     */
    v1alpha3vmExpandSpec(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3vmExpandSpecRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the running VMI for the specified VirtualMachine and port.
     */
    v1alpha3vmPortForwardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3vmPortForward().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3vmPortForward().');
            }
            if (requestParameters['port'] == null) {
                throw new runtime.RequiredError('port', 'Required parameter "port" was null or undefined when calling v1alpha3vmPortForward().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/portforward/{port}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"port"}}`, encodeURIComponent(String(requestParameters['port']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the running VMI for the specified VirtualMachine and port.
     */
    v1alpha3vmPortForward(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3vmPortForwardRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachine and port.
     */
    v1alpha3vmPortForwardWithProtocolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3vmPortForwardWithProtocol().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3vmPortForwardWithProtocol().');
            }
            if (requestParameters['port'] == null) {
                throw new runtime.RequiredError('port', 'Required parameter "port" was null or undefined when calling v1alpha3vmPortForwardWithProtocol().');
            }
            if (requestParameters['protocol'] == null) {
                throw new runtime.RequiredError('protocol', 'Required parameter "protocol" was null or undefined when calling v1alpha3vmPortForwardWithProtocol().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/portforward/{port}/{protocol}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"port"}}`, encodeURIComponent(String(requestParameters['port']))).replace(`{${"protocol"}}`, encodeURIComponent(String(requestParameters['protocol']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachine and port.
     */
    v1alpha3vmPortForwardWithProtocol(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3vmPortForwardWithProtocolRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Removes a volume and disk from a running Virtual Machine.
     */
    v1alpha3vmRemovevolumeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3vmRemovevolume().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3vmRemovevolume().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3vmRemovevolume().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachines/{name}/removevolume`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1RemoveVolumeOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Removes a volume and disk from a running Virtual Machine.
     */
    v1alpha3vmRemovevolume(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3vmRemovevolumeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add a volume and disk to a running Virtual Machine Instance
     */
    v1alpha3vmiAddvolumeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3vmiAddvolume().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3vmiAddvolume().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3vmiAddvolume().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/addvolume`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1AddVolumeOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Add a volume and disk to a running Virtual Machine Instance
     */
    v1alpha3vmiAddvolume(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3vmiAddvolumeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port.
     */
    v1alpha3vmiPortForwardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3vmiPortForward().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3vmiPortForward().');
            }
            if (requestParameters['port'] == null) {
                throw new runtime.RequiredError('port', 'Required parameter "port" was null or undefined when calling v1alpha3vmiPortForward().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/portforward/{port}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"port"}}`, encodeURIComponent(String(requestParameters['port']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port.
     */
    v1alpha3vmiPortForward(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3vmiPortForwardRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachineInstance and port.
     */
    v1alpha3vmiPortForwardWithProtocolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3vmiPortForwardWithProtocol().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3vmiPortForwardWithProtocol().');
            }
            if (requestParameters['port'] == null) {
                throw new runtime.RequiredError('port', 'Required parameter "port" was null or undefined when calling v1alpha3vmiPortForwardWithProtocol().');
            }
            if (requestParameters['protocol'] == null) {
                throw new runtime.RequiredError('protocol', 'Required parameter "protocol" was null or undefined when calling v1alpha3vmiPortForwardWithProtocol().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/portforward/{port}/{protocol}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"port"}}`, encodeURIComponent(String(requestParameters['port']))).replace(`{${"protocol"}}`, encodeURIComponent(String(requestParameters['protocol']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachineInstance and port.
     */
    v1alpha3vmiPortForwardWithProtocol(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1alpha3vmiPortForwardWithProtocolRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Removes a volume and disk from a running Virtual Machine Instance
     */
    v1alpha3vmiRemovevolumeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1alpha3vmiRemovevolume().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1alpha3vmiRemovevolume().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1alpha3vmiRemovevolume().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1alpha3/namespaces/{namespace}/virtualmachineinstances/{name}/removevolume`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1RemoveVolumeOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Removes a volume and disk from a running Virtual Machine Instance
     */
    v1alpha3vmiRemovevolume(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1alpha3vmiRemovevolumeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    v1dumpClusterProfilerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/dump-cluster-profiler`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    v1dumpClusterProfiler(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1dumpClusterProfilerRaw(initOverrides);
        });
    }
    /**
     * Get a KubeVirt API resources
     */
    v1getAPISubResourcesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
        });
    }
    /**
     * Get a KubeVirt API resources
     */
    v1getAPISubResources(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1getAPISubResourcesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    v1startClusterProfilerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/start-cluster-profiler`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    v1startClusterProfiler(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1startClusterProfilerRaw(initOverrides);
        });
    }
    /**
     */
    v1stopClusterProfilerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/stop-cluster-profiler`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    v1stopClusterProfiler(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1stopClusterProfilerRaw(initOverrides);
        });
    }
    /**
     * Open a websocket connection to connect to USB device on the specified VirtualMachineInstance.
     */
    v1usbredirRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1usbredir().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1usbredir().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/usbredir`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection to connect to USB device on the specified VirtualMachineInstance.
     */
    v1usbredir(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1usbredirRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Add a volume and disk to a running Virtual Machine.
     */
    v1vmAddvolumeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1vmAddvolume().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1vmAddvolume().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1vmAddvolume().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/addvolume`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1AddVolumeOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Add a volume and disk to a running Virtual Machine.
     */
    v1vmAddvolume(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1vmAddvolumeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get VirtualMachine object with expanded instancetype and preference.
     */
    v1vmExpandSpecRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1vmExpandSpec().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1vmExpandSpec().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/expand-spec`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Get VirtualMachine object with expanded instancetype and preference.
     */
    v1vmExpandSpec(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1vmExpandSpecRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the running VMI for the specified VirtualMachine and port.
     */
    v1vmPortForwardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1vmPortForward().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1vmPortForward().');
            }
            if (requestParameters['port'] == null) {
                throw new runtime.RequiredError('port', 'Required parameter "port" was null or undefined when calling v1vmPortForward().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/portforward/{port}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"port"}}`, encodeURIComponent(String(requestParameters['port']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the running VMI for the specified VirtualMachine and port.
     */
    v1vmPortForward(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1vmPortForwardRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachine and port.
     */
    v1vmPortForwardWithProtocolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1vmPortForwardWithProtocol().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1vmPortForwardWithProtocol().');
            }
            if (requestParameters['port'] == null) {
                throw new runtime.RequiredError('port', 'Required parameter "port" was null or undefined when calling v1vmPortForwardWithProtocol().');
            }
            if (requestParameters['protocol'] == null) {
                throw new runtime.RequiredError('protocol', 'Required parameter "protocol" was null or undefined when calling v1vmPortForwardWithProtocol().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/portforward/{port}/{protocol}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"port"}}`, encodeURIComponent(String(requestParameters['port']))).replace(`{${"protocol"}}`, encodeURIComponent(String(requestParameters['protocol']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachine and port.
     */
    v1vmPortForwardWithProtocol(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1vmPortForwardWithProtocolRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Removes a volume and disk from a running Virtual Machine.
     */
    v1vmRemovevolumeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1vmRemovevolume().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1vmRemovevolume().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1vmRemovevolume().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachines/{name}/removevolume`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1RemoveVolumeOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Removes a volume and disk from a running Virtual Machine.
     */
    v1vmRemovevolume(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1vmRemovevolumeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Add a volume and disk to a running Virtual Machine Instance
     */
    v1vmiAddvolumeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1vmiAddvolume().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1vmiAddvolume().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1vmiAddvolume().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/addvolume`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1AddVolumeOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Add a volume and disk to a running Virtual Machine Instance
     */
    v1vmiAddvolume(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1vmiAddvolumeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port.
     */
    v1vmiPortForwardRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1vmiPortForward().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1vmiPortForward().');
            }
            if (requestParameters['port'] == null) {
                throw new runtime.RequiredError('port', 'Required parameter "port" was null or undefined when calling v1vmiPortForward().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/portforward/{port}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"port"}}`, encodeURIComponent(String(requestParameters['port']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port.
     */
    v1vmiPortForward(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1vmiPortForwardRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachineInstance and port.
     */
    v1vmiPortForwardWithProtocolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1vmiPortForwardWithProtocol().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1vmiPortForwardWithProtocol().');
            }
            if (requestParameters['port'] == null) {
                throw new runtime.RequiredError('port', 'Required parameter "port" was null or undefined when calling v1vmiPortForwardWithProtocol().');
            }
            if (requestParameters['protocol'] == null) {
                throw new runtime.RequiredError('protocol', 'Required parameter "protocol" was null or undefined when calling v1vmiPortForwardWithProtocol().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/portforward/{port}/{protocol}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"port"}}`, encodeURIComponent(String(requestParameters['port']))).replace(`{${"protocol"}}`, encodeURIComponent(String(requestParameters['protocol']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachineInstance and port.
     */
    v1vmiPortForwardWithProtocol(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.v1vmiPortForwardWithProtocolRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Removes a volume and disk from a running Virtual Machine Instance
     */
    v1vmiRemovevolumeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling v1vmiRemovevolume().');
            }
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling v1vmiRemovevolume().');
            }
            if (requestParameters['body'] == null) {
                throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling v1vmiRemovevolume().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/apis/subresources.kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstances/{name}/removevolume`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: V1RemoveVolumeOptionsToJSON(requestParameters['body']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Removes a volume and disk from a running Virtual Machine Instance
     */
    v1vmiRemovevolume(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1vmiRemovevolumeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a KubeVirtList object.
     */
    watchKubeVirtListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/kubevirt`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a KubeVirtList object.
     */
    watchKubeVirtListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchKubeVirtListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a MigrationPolicyList object.
     */
    watchMigrationPolicyListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/migrations.kubevirt.io/v1alpha1/watch/migrationpolicies`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a MigrationPolicyList object.
     */
    watchMigrationPolicyListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchMigrationPolicyListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a KubeVirt object.
     */
    watchNamespacedKubeVirtRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedKubeVirt().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/namespaces/{namespace}/kubevirt`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a KubeVirt object.
     */
    watchNamespacedKubeVirt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedKubeVirtRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachine object.
     */
    watchNamespacedVirtualMachineRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachine().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/namespaces/{namespace}/virtualmachines`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachine object.
     */
    watchNamespacedVirtualMachine(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachineRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineExport object.
     */
    watchNamespacedVirtualMachineExportRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachineExport().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/watch/namespaces/{namespace}/virtualmachineexports`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineExport object.
     */
    watchNamespacedVirtualMachineExport(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachineExportRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineInstance object.
     */
    watchNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachineInstance().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/namespaces/{namespace}/virtualmachineinstances`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineInstance object.
     */
    watchNamespacedVirtualMachineInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachineInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineInstanceMigration object.
     */
    watchNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachineInstanceMigration().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/namespaces/{namespace}/virtualmachineinstancemigrations`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineInstanceMigration object.
     */
    watchNamespacedVirtualMachineInstanceMigration(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachineInstanceMigrationRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineInstancePreset object.
     */
    watchNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachineInstancePreset().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/namespaces/{namespace}/virtualmachineinstancepresets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineInstancePreset object.
     */
    watchNamespacedVirtualMachineInstancePreset(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachineInstancePresetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineInstanceReplicaSet object.
     */
    watchNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachineInstanceReplicaSet().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/namespaces/{namespace}/virtualmachineinstancereplicasets`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineInstanceReplicaSet object.
     */
    watchNamespacedVirtualMachineInstanceReplicaSet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachineInstanceReplicaSetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineInstancetype object.
     */
    watchNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachineInstancetype().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/watch/namespaces/{namespace}/virtualmachineinstancetypes`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineInstancetype object.
     */
    watchNamespacedVirtualMachineInstancetype(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachineInstancetypeRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachinePool object.
     */
    watchNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachinePool().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/watch/namespaces/{namespace}/virtualmachinepools`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachinePool object.
     */
    watchNamespacedVirtualMachinePool(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachinePoolRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachinePreference object.
     */
    watchNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachinePreference().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/watch/namespaces/{namespace}/virtualmachinepreferences`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachinePreference object.
     */
    watchNamespacedVirtualMachinePreference(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachinePreferenceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineRestore object.
     */
    watchNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachineRestore().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/watch/namespaces/{namespace}/virtualmachinerestores`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineRestore object.
     */
    watchNamespacedVirtualMachineRestore(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachineRestoreRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineSnapshot object.
     */
    watchNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachineSnapshot().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/watch/namespaces/{namespace}/virtualmachinesnapshots`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineSnapshot object.
     */
    watchNamespacedVirtualMachineSnapshot(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachineSnapshotRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineSnapshotContent object.
     */
    watchNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['namespace'] == null) {
                throw new runtime.RequiredError('namespace', 'Required parameter "namespace" was null or undefined when calling watchNamespacedVirtualMachineSnapshotContent().');
            }
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/watch/namespaces/{namespace}/virtualmachinesnapshotcontents`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineSnapshotContent object.
     */
    watchNamespacedVirtualMachineSnapshotContent(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.watchNamespacedVirtualMachineSnapshotContentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineCloneList object.
     */
    watchVirtualMachineCloneListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/clone.kubevirt.io/v1alpha1/watch/virtualmachineclones`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineCloneList object.
     */
    watchVirtualMachineCloneListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineCloneListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineClusterInstancetypeList object.
     */
    watchVirtualMachineClusterInstancetypeListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/watch/virtualmachineclusterinstancetypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineClusterInstancetypeList object.
     */
    watchVirtualMachineClusterInstancetypeListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineClusterInstancetypeListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineClusterPreferenceList object.
     */
    watchVirtualMachineClusterPreferenceListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/watch/virtualmachineclusterpreferences`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineClusterPreferenceList object.
     */
    watchVirtualMachineClusterPreferenceListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineClusterPreferenceListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineExportList object.
     */
    watchVirtualMachineExportListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/export.kubevirt.io/v1beta1/watch/virtualmachineexports`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineExportList object.
     */
    watchVirtualMachineExportListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineExportListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineInstanceList object.
     */
    watchVirtualMachineInstanceListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/virtualmachineinstances`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineInstanceList object.
     */
    watchVirtualMachineInstanceListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineInstanceListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineInstanceMigrationList object.
     */
    watchVirtualMachineInstanceMigrationListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/virtualmachineinstancemigrations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineInstanceMigrationList object.
     */
    watchVirtualMachineInstanceMigrationListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineInstanceMigrationListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineInstancePresetList object.
     */
    watchVirtualMachineInstancePresetListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/virtualmachineinstancepresets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineInstancePresetList object.
     */
    watchVirtualMachineInstancePresetListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineInstancePresetListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineInstanceReplicaSetList object.
     */
    watchVirtualMachineInstanceReplicaSetListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/virtualmachineinstancereplicasets`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineInstanceReplicaSetList object.
     */
    watchVirtualMachineInstanceReplicaSetListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineInstanceReplicaSetListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineInstancetypeList object.
     */
    watchVirtualMachineInstancetypeListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/watch/virtualmachineinstancetypes`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineInstancetypeList object.
     */
    watchVirtualMachineInstancetypeListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineInstancetypeListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineList object.
     */
    watchVirtualMachineListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/kubevirt.io/v1/watch/virtualmachines`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineList object.
     */
    watchVirtualMachineListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachinePoolList object.
     */
    watchVirtualMachinePoolListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/pool.kubevirt.io/v1alpha1/watch/virtualmachinepools`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachinePoolList object.
     */
    watchVirtualMachinePoolListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachinePoolListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachinePreferenceList object.
     */
    watchVirtualMachinePreferenceListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/instancetype.kubevirt.io/v1beta1/watch/virtualmachinepreferences`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachinePreferenceList object.
     */
    watchVirtualMachinePreferenceListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachinePreferenceListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineRestoreList object.
     */
    watchVirtualMachineRestoreListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/watch/virtualmachinerestores`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineRestoreList object.
     */
    watchVirtualMachineRestoreListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineRestoreListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineSnapshotContentList object.
     */
    watchVirtualMachineSnapshotContentListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/watch/virtualmachinesnapshotcontents`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineSnapshotContentList object.
     */
    watchVirtualMachineSnapshotContentListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineSnapshotContentListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Watch a VirtualMachineSnapshotList object.
     */
    watchVirtualMachineSnapshotListForAllNamespacesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['_continue'] != null) {
                queryParameters['continue'] = requestParameters['_continue'];
            }
            if (requestParameters['fieldSelector'] != null) {
                queryParameters['fieldSelector'] = requestParameters['fieldSelector'];
            }
            if (requestParameters['includeUninitialized'] != null) {
                queryParameters['includeUninitialized'] = requestParameters['includeUninitialized'];
            }
            if (requestParameters['labelSelector'] != null) {
                queryParameters['labelSelector'] = requestParameters['labelSelector'];
            }
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['resourceVersion'] != null) {
                queryParameters['resourceVersion'] = requestParameters['resourceVersion'];
            }
            if (requestParameters['timeoutSeconds'] != null) {
                queryParameters['timeoutSeconds'] = requestParameters['timeoutSeconds'];
            }
            if (requestParameters['watch'] != null) {
                queryParameters['watch'] = requestParameters['watch'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/apis/snapshot.kubevirt.io/v1beta1/watch/virtualmachinesnapshots`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => K8sIoApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
        });
    }
    /**
     * Watch a VirtualMachineSnapshotList object.
     */
    watchVirtualMachineSnapshotListForAllNamespaces() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.watchVirtualMachineSnapshotListForAllNamespacesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
//# sourceMappingURL=DefaultApi.js.map