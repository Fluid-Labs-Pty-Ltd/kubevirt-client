/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1CPUFeature } from '../models/V1CPUFeature.js';
import { V1NUMA } from '../models/V1NUMA.js';
import { V1Realtime } from '../models/V1Realtime.js';
/**
* CPU allows specifying the CPU topology.
*/
export declare class V1CPU {
    /**
    * Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
    */
    'cores'?: number;
    /**
    * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.
    */
    'dedicatedCpuPlacement'?: boolean;
    /**
    * Features specifies the CPU features list inside the VMI.
    */
    'features'?: Array<V1CPUFeature>;
    /**
    * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.
    */
    'isolateEmulatorThread'?: boolean;
    /**
    * MaxSockets specifies the maximum amount of sockets that can be hotplugged
    */
    'maxSockets'?: number;
    /**
    * Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \"host-passthrough\" to get the same CPU as the node and \"host-model\" to get CPU closest to the node one. Defaults to host-model.
    */
    'model'?: string;
    'numa'?: V1NUMA;
    'realtime'?: V1Realtime;
    /**
    * Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
    */
    'sockets'?: number;
    /**
    * Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
    */
    'threads'?: number;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
//# sourceMappingURL=V1CPU.d.ts.map