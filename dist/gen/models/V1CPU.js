"use strict";
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1CPU = void 0;
/**
* CPU allows specifying the CPU topology.
*/
class V1CPU {
    /**
    * Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
    */
    'cores';
    /**
    * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.
    */
    'dedicatedCpuPlacement';
    /**
    * Features specifies the CPU features list inside the VMI.
    */
    'features';
    /**
    * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.
    */
    'isolateEmulatorThread';
    /**
    * MaxSockets specifies the maximum amount of sockets that can be hotplugged
    */
    'maxSockets';
    /**
    * Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \"host-passthrough\" to get the same CPU as the node and \"host-model\" to get CPU closest to the node one. Defaults to host-model.
    */
    'model';
    'numa';
    'realtime';
    /**
    * Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
    */
    'sockets';
    /**
    * Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
    */
    'threads';
    static discriminator = undefined;
    static mapping = undefined;
    static attributeTypeMap = [
        {
            "name": "cores",
            "baseName": "cores",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "dedicatedCpuPlacement",
            "baseName": "dedicatedCpuPlacement",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "features",
            "baseName": "features",
            "type": "Array<V1CPUFeature>",
            "format": ""
        },
        {
            "name": "isolateEmulatorThread",
            "baseName": "isolateEmulatorThread",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "maxSockets",
            "baseName": "maxSockets",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "model",
            "baseName": "model",
            "type": "string",
            "format": ""
        },
        {
            "name": "numa",
            "baseName": "numa",
            "type": "V1NUMA",
            "format": ""
        },
        {
            "name": "realtime",
            "baseName": "realtime",
            "type": "V1Realtime",
            "format": ""
        },
        {
            "name": "sockets",
            "baseName": "sockets",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "threads",
            "baseName": "threads",
            "type": "number",
            "format": "int64"
        }
    ];
    static getAttributeTypeMap() {
        return V1CPU.attributeTypeMap;
    }
    constructor() {
    }
}
exports.V1CPU = V1CPU;
//# sourceMappingURL=V1CPU.js.map