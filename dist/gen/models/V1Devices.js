"use strict";
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1Devices = void 0;
class V1Devices {
    /**
    * Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true.
    */
    'autoattachGraphicsDevice';
    /**
    * Whether to attach an Input Device. Defaults to false.
    */
    'autoattachInputDevice';
    /**
    * Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true.
    */
    'autoattachMemBalloon';
    /**
    * Whether to attach a pod network interface. Defaults to true.
    */
    'autoattachPodInterface';
    /**
    * Whether to attach the default virtio-serial console or not. Serial console access will not be available if set to false. Defaults to true.
    */
    'autoattachSerialConsole';
    /**
    * Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false.
    */
    'autoattachVSOCK';
    /**
    * Whether or not to enable virtio multi-queue for block devices. Defaults to false.
    */
    'blockMultiQueue';
    /**
    * Represent a subset of client devices that can be accessed by VMI. At the moment only, USB devices using Usbredir\'s library and tooling. Another fit would be a smartcard with libcacard.  The struct is currently empty as there is no immediate request for user-facing APIs. This structure simply turns on USB redirection of UsbClientPassthroughMaxNumberOf devices.
    */
    'clientPassthrough';
    /**
    * DisableHotplug disabled the ability to hotplug disks.
    */
    'disableHotplug';
    /**
    * Disks describes disks, cdroms and luns which are connected to the vmi.
    */
    'disks';
    'downwardMetrics';
    /**
    * Filesystems describes filesystem which is connected to the vmi.
    */
    'filesystems';
    /**
    * Whether to attach a GPU device to the vmi.
    */
    'gpus';
    /**
    * Whether to attach a host device to the vmi.
    */
    'hostDevices';
    /**
    * Inputs describe input devices
    */
    'inputs';
    /**
    * Interfaces describe network interfaces which are added to the vmi.
    */
    'interfaces';
    /**
    * Whether to log the auto-attached default serial console or not. Serial console logs will be collect to a file and then streamed from a named `guest-console-log`. Not relevant if autoattachSerialConsole is disabled. Defaults to cluster wide setting on VirtualMachineOptions.
    */
    'logSerialConsole';
    /**
    * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
    */
    'networkInterfaceMultiqueue';
    /**
    * Rng represents the random device passed from host
    */
    'rng';
    'sound';
    'tpm';
    /**
    * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0).
    */
    'useVirtioTransitional';
    'watchdog';
    static discriminator = undefined;
    static mapping = undefined;
    static attributeTypeMap = [
        {
            "name": "autoattachGraphicsDevice",
            "baseName": "autoattachGraphicsDevice",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "autoattachInputDevice",
            "baseName": "autoattachInputDevice",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "autoattachMemBalloon",
            "baseName": "autoattachMemBalloon",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "autoattachPodInterface",
            "baseName": "autoattachPodInterface",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "autoattachSerialConsole",
            "baseName": "autoattachSerialConsole",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "autoattachVSOCK",
            "baseName": "autoattachVSOCK",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "blockMultiQueue",
            "baseName": "blockMultiQueue",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "clientPassthrough",
            "baseName": "clientPassthrough",
            "type": "any",
            "format": ""
        },
        {
            "name": "disableHotplug",
            "baseName": "disableHotplug",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "disks",
            "baseName": "disks",
            "type": "Array<V1Disk>",
            "format": ""
        },
        {
            "name": "downwardMetrics",
            "baseName": "downwardMetrics",
            "type": "any",
            "format": ""
        },
        {
            "name": "filesystems",
            "baseName": "filesystems",
            "type": "Array<V1Filesystem>",
            "format": ""
        },
        {
            "name": "gpus",
            "baseName": "gpus",
            "type": "Array<V1GPU>",
            "format": ""
        },
        {
            "name": "hostDevices",
            "baseName": "hostDevices",
            "type": "Array<V1HostDevice>",
            "format": ""
        },
        {
            "name": "inputs",
            "baseName": "inputs",
            "type": "Array<V1Input>",
            "format": ""
        },
        {
            "name": "interfaces",
            "baseName": "interfaces",
            "type": "Array<V1Interface>",
            "format": ""
        },
        {
            "name": "logSerialConsole",
            "baseName": "logSerialConsole",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "networkInterfaceMultiqueue",
            "baseName": "networkInterfaceMultiqueue",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "rng",
            "baseName": "rng",
            "type": "any",
            "format": ""
        },
        {
            "name": "sound",
            "baseName": "sound",
            "type": "V1SoundDevice",
            "format": ""
        },
        {
            "name": "tpm",
            "baseName": "tpm",
            "type": "V1TPMDevice",
            "format": ""
        },
        {
            "name": "useVirtioTransitional",
            "baseName": "useVirtioTransitional",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "watchdog",
            "baseName": "watchdog",
            "type": "V1Watchdog",
            "format": ""
        }
    ];
    static getAttributeTypeMap() {
        return V1Devices.attributeTypeMap;
    }
    constructor() {
    }
}
exports.V1Devices = V1Devices;
//# sourceMappingURL=V1Devices.js.map