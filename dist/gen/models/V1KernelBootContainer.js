"use strict";
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1KernelBootContainerImagePullPolicyEnum = exports.V1KernelBootContainer = void 0;
/**
* If set, the VM will be booted from the defined kernel / initrd.
*/
class V1KernelBootContainer {
    /**
    * Image that contains initrd / kernel files.
    */
    'image';
    /**
    * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images  Possible enum values:  - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.  - `\"IfNotPresent\"` means that kubelet pulls if the image isn\'t present on disk. Container will fail if the image isn\'t present and the pull fails.  - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn\'t present
    */
    'imagePullPolicy';
    /**
    * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
    */
    'imagePullSecret';
    /**
    * the fully-qualified path to the ramdisk image in the host OS
    */
    'initrdPath';
    /**
    * The fully-qualified path to the kernel image in the host OS
    */
    'kernelPath';
    static discriminator = undefined;
    static mapping = undefined;
    static attributeTypeMap = [
        {
            "name": "image",
            "baseName": "image",
            "type": "string",
            "format": ""
        },
        {
            "name": "imagePullPolicy",
            "baseName": "imagePullPolicy",
            "type": "V1KernelBootContainerImagePullPolicyEnum",
            "format": ""
        },
        {
            "name": "imagePullSecret",
            "baseName": "imagePullSecret",
            "type": "string",
            "format": ""
        },
        {
            "name": "initrdPath",
            "baseName": "initrdPath",
            "type": "string",
            "format": ""
        },
        {
            "name": "kernelPath",
            "baseName": "kernelPath",
            "type": "string",
            "format": ""
        }
    ];
    static getAttributeTypeMap() {
        return V1KernelBootContainer.attributeTypeMap;
    }
    constructor() {
    }
}
exports.V1KernelBootContainer = V1KernelBootContainer;
var V1KernelBootContainerImagePullPolicyEnum;
(function (V1KernelBootContainerImagePullPolicyEnum) {
    V1KernelBootContainerImagePullPolicyEnum["Always"] = "Always";
    V1KernelBootContainerImagePullPolicyEnum["IfNotPresent"] = "IfNotPresent";
    V1KernelBootContainerImagePullPolicyEnum["Never"] = "Never";
})(V1KernelBootContainerImagePullPolicyEnum || (exports.V1KernelBootContainerImagePullPolicyEnum = V1KernelBootContainerImagePullPolicyEnum = {}));
//# sourceMappingURL=V1KernelBootContainer.js.map