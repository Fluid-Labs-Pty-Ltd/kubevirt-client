/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* VirtualMachineInstanceStatus represents information about the status of a VirtualMachineInstance. Status may trail the actual state of a system.
*/
export class V1VirtualMachineInstanceStatus {
    /**
    * VSOCKCID is used to track the allocated VSOCK CID in the VM.
    */
    'VSOCKCID';
    /**
    * ActivePods is a mapping of pod UID to node name. It is possible for multiple pods to be running for a single VMI during migration.
    */
    'activePods';
    /**
    * Conditions are specific points in VirtualMachineInstance\'s pod runtime.
    */
    'conditions';
    'currentCPUTopology';
    /**
    * EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want to evacuate. It is meant to be used by KubeVirt core components only and can\'t be set or modified by users.
    */
    'evacuationNodeName';
    /**
    * FSFreezeStatus is the state of the fs of the guest it can be either frozen or thawed
    */
    'fsFreezeStatus';
    'guestOSInfo';
    /**
    * Interfaces represent the details of available network interfaces.
    */
    'interfaces';
    'kernelBootStatus';
    /**
    * LauncherContainerImageVersion indicates what container image is currently active for the vmi.
    */
    'launcherContainerImageVersion';
    'machine';
    'memory';
    /**
    * MigratedVolumes lists the source and destination volumes during the volume migration
    */
    'migratedVolumes';
    /**
    * Represents the method using which the vmi can be migrated: live migration or block migration
    */
    'migrationMethod';
    'migrationState';
    /**
    * This represents the migration transport
    */
    'migrationTransport';
    /**
    * NodeName is the name where the VirtualMachineInstance is currently running.
    */
    'nodeName';
    /**
    * Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.
    */
    'phase';
    /**
    * PhaseTransitionTimestamp is the timestamp of when the last phase change occurred
    */
    'phaseTransitionTimestamps';
    /**
    * The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md  Possible enum values:  - `\"BestEffort\"` is the BestEffort qos class.  - `\"Burstable\"` is the Burstable qos class.  - `\"Guaranteed\"` is the Guaranteed qos class.
    */
    'qosClass';
    /**
    * A brief CamelCase message indicating details about why the VMI is in this state. e.g. \'NodeUnresponsive\'
    */
    'reason';
    /**
    * RuntimeUser is used to determine what user will be used in launcher
    */
    'runtimeUser';
    /**
    * SELinuxContext is the actual SELinux context of the virt-launcher pod
    */
    'selinuxContext';
    'topologyHints';
    /**
    * VirtualMachineRevisionName is used to get the vm revision of the vmi when doing an online vm snapshot
    */
    'virtualMachineRevisionName';
    /**
    * VolumeStatus contains the statuses of all the volumes
    */
    'volumeStatus';
    static discriminator = undefined;
    static mapping = undefined;
    static attributeTypeMap = [
        {
            "name": "VSOCKCID",
            "baseName": "VSOCKCID",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "activePods",
            "baseName": "activePods",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<V1VirtualMachineInstanceCondition>",
            "format": ""
        },
        {
            "name": "currentCPUTopology",
            "baseName": "currentCPUTopology",
            "type": "V1CPUTopology",
            "format": ""
        },
        {
            "name": "evacuationNodeName",
            "baseName": "evacuationNodeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "fsFreezeStatus",
            "baseName": "fsFreezeStatus",
            "type": "string",
            "format": ""
        },
        {
            "name": "guestOSInfo",
            "baseName": "guestOSInfo",
            "type": "V1VirtualMachineInstanceGuestOSInfo",
            "format": ""
        },
        {
            "name": "interfaces",
            "baseName": "interfaces",
            "type": "Array<V1VirtualMachineInstanceNetworkInterface>",
            "format": ""
        },
        {
            "name": "kernelBootStatus",
            "baseName": "kernelBootStatus",
            "type": "V1KernelBootStatus",
            "format": ""
        },
        {
            "name": "launcherContainerImageVersion",
            "baseName": "launcherContainerImageVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "machine",
            "baseName": "machine",
            "type": "V1Machine",
            "format": ""
        },
        {
            "name": "memory",
            "baseName": "memory",
            "type": "V1MemoryStatus",
            "format": ""
        },
        {
            "name": "migratedVolumes",
            "baseName": "migratedVolumes",
            "type": "Array<V1StorageMigratedVolumeInfo>",
            "format": ""
        },
        {
            "name": "migrationMethod",
            "baseName": "migrationMethod",
            "type": "string",
            "format": ""
        },
        {
            "name": "migrationState",
            "baseName": "migrationState",
            "type": "V1VirtualMachineInstanceMigrationState",
            "format": ""
        },
        {
            "name": "migrationTransport",
            "baseName": "migrationTransport",
            "type": "string",
            "format": ""
        },
        {
            "name": "nodeName",
            "baseName": "nodeName",
            "type": "string",
            "format": ""
        },
        {
            "name": "phase",
            "baseName": "phase",
            "type": "string",
            "format": ""
        },
        {
            "name": "phaseTransitionTimestamps",
            "baseName": "phaseTransitionTimestamps",
            "type": "Array<V1VirtualMachineInstancePhaseTransitionTimestamp>",
            "format": ""
        },
        {
            "name": "qosClass",
            "baseName": "qosClass",
            "type": "V1VirtualMachineInstanceStatusQosClassEnum",
            "format": ""
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string",
            "format": ""
        },
        {
            "name": "runtimeUser",
            "baseName": "runtimeUser",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "selinuxContext",
            "baseName": "selinuxContext",
            "type": "string",
            "format": ""
        },
        {
            "name": "topologyHints",
            "baseName": "topologyHints",
            "type": "V1TopologyHints",
            "format": ""
        },
        {
            "name": "virtualMachineRevisionName",
            "baseName": "virtualMachineRevisionName",
            "type": "string",
            "format": ""
        },
        {
            "name": "volumeStatus",
            "baseName": "volumeStatus",
            "type": "Array<V1VolumeStatus>",
            "format": ""
        }
    ];
    static getAttributeTypeMap() {
        return V1VirtualMachineInstanceStatus.attributeTypeMap;
    }
    constructor() {
    }
}
export var V1VirtualMachineInstanceStatusQosClassEnum;
(function (V1VirtualMachineInstanceStatusQosClassEnum) {
    V1VirtualMachineInstanceStatusQosClassEnum["BestEffort"] = "BestEffort";
    V1VirtualMachineInstanceStatusQosClassEnum["Burstable"] = "Burstable";
    V1VirtualMachineInstanceStatusQosClassEnum["Guaranteed"] = "Guaranteed";
})(V1VirtualMachineInstanceStatusQosClassEnum || (V1VirtualMachineInstanceStatusQosClassEnum = {}));
//# sourceMappingURL=V1VirtualMachineInstanceStatus.js.map