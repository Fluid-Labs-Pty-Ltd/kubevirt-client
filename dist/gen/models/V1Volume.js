"use strict";
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1Volume = void 0;
/**
* Volume represents a named volume in a vmi.
*/
class V1Volume {
    'cloudInitConfigDrive';
    'cloudInitNoCloud';
    'configMap';
    'containerDisk';
    'dataVolume';
    'downwardAPI';
    /**
    * DownwardMetricsVolumeSource adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
    */
    'downwardMetrics';
    'emptyDisk';
    'ephemeral';
    'hostDisk';
    'memoryDump';
    /**
    * Volume\'s name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    */
    'name';
    'persistentVolumeClaim';
    'secret';
    'serviceAccount';
    'sysprep';
    static discriminator = undefined;
    static mapping = undefined;
    static attributeTypeMap = [
        {
            "name": "cloudInitConfigDrive",
            "baseName": "cloudInitConfigDrive",
            "type": "V1CloudInitConfigDriveSource",
            "format": ""
        },
        {
            "name": "cloudInitNoCloud",
            "baseName": "cloudInitNoCloud",
            "type": "V1CloudInitNoCloudSource",
            "format": ""
        },
        {
            "name": "configMap",
            "baseName": "configMap",
            "type": "V1ConfigMapVolumeSource",
            "format": ""
        },
        {
            "name": "containerDisk",
            "baseName": "containerDisk",
            "type": "V1ContainerDiskSource",
            "format": ""
        },
        {
            "name": "dataVolume",
            "baseName": "dataVolume",
            "type": "V1DataVolumeSource",
            "format": ""
        },
        {
            "name": "downwardAPI",
            "baseName": "downwardAPI",
            "type": "V1DownwardAPIVolumeSource",
            "format": ""
        },
        {
            "name": "downwardMetrics",
            "baseName": "downwardMetrics",
            "type": "any",
            "format": ""
        },
        {
            "name": "emptyDisk",
            "baseName": "emptyDisk",
            "type": "V1EmptyDiskSource",
            "format": ""
        },
        {
            "name": "ephemeral",
            "baseName": "ephemeral",
            "type": "V1EphemeralVolumeSource",
            "format": ""
        },
        {
            "name": "hostDisk",
            "baseName": "hostDisk",
            "type": "V1HostDisk",
            "format": ""
        },
        {
            "name": "memoryDump",
            "baseName": "memoryDump",
            "type": "V1MemoryDumpVolumeSource",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "persistentVolumeClaim",
            "baseName": "persistentVolumeClaim",
            "type": "V1PersistentVolumeClaimVolumeSource",
            "format": ""
        },
        {
            "name": "secret",
            "baseName": "secret",
            "type": "V1SecretVolumeSource",
            "format": ""
        },
        {
            "name": "serviceAccount",
            "baseName": "serviceAccount",
            "type": "V1ServiceAccountVolumeSource",
            "format": ""
        },
        {
            "name": "sysprep",
            "baseName": "sysprep",
            "type": "V1SysprepSource",
            "format": ""
        }
    ];
    static getAttributeTypeMap() {
        return V1Volume.attributeTypeMap;
    }
    constructor() {
    }
}
exports.V1Volume = V1Volume;
//# sourceMappingURL=V1Volume.js.map