/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1BlockSize } from '../models/V1BlockSize.js';
import { V1TPMDevice } from '../models/V1TPMDevice.js';
import { V1VGPUOptions } from '../models/V1VGPUOptions.js';
/**
* DevicePreferences contains various optional Device preferences.
*/
export declare class V1beta1DevicePreferences {
    /**
    * PreferredAutoattachGraphicsDevice optionally defines the preferred value of AutoattachGraphicsDevice
    */
    'preferredAutoattachGraphicsDevice'?: boolean;
    /**
    * PreferredAutoattachInputDevice optionally defines the preferred value of AutoattachInputDevice
    */
    'preferredAutoattachInputDevice'?: boolean;
    /**
    * PreferredAutoattachMemBalloon optionally defines the preferred value of AutoattachMemBalloon
    */
    'preferredAutoattachMemBalloon'?: boolean;
    /**
    * PreferredAutoattachPodInterface optionally defines the preferred value of AutoattachPodInterface
    */
    'preferredAutoattachPodInterface'?: boolean;
    /**
    * PreferredAutoattachSerialConsole optionally defines the preferred value of AutoattachSerialConsole
    */
    'preferredAutoattachSerialConsole'?: boolean;
    /**
    * PreferredBlockMultiQueue optionally enables the vhost multiqueue feature for virtio disks.
    */
    'preferredBlockMultiQueue'?: boolean;
    /**
    * PreferredCdromBus optionally defines the preferred bus for Cdrom Disk devices.
    */
    'preferredCdromBus'?: string;
    /**
    * PreferredDisableHotplug optionally defines the preferred value of DisableHotplug
    */
    'preferredDisableHotplug'?: boolean;
    'preferredDiskBlockSize'?: V1BlockSize;
    /**
    * PreferredDiskBus optionally defines the preferred bus for Disk Disk devices.
    */
    'preferredDiskBus'?: string;
    /**
    * PreferredCache optionally defines the DriverCache to be used by Disk devices.
    */
    'preferredDiskCache'?: string;
    /**
    * PreferredDedicatedIoThread optionally enables dedicated IO threads for Disk devices using the virtio bus.
    */
    'preferredDiskDedicatedIoThread'?: boolean;
    /**
    * PreferredIo optionally defines the QEMU disk IO mode to be used by Disk devices.
    */
    'preferredDiskIO'?: string;
    /**
    * PreferredInputBus optionally defines the preferred bus for Input devices.
    */
    'preferredInputBus'?: string;
    /**
    * PreferredInputType optionally defines the preferred type for Input devices.
    */
    'preferredInputType'?: string;
    /**
    * InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
    */
    'preferredInterfaceMasquerade'?: any;
    /**
    * PreferredInterfaceModel optionally defines the preferred model to be used by Interface devices.
    */
    'preferredInterfaceModel'?: string;
    /**
    * PreferredLunBus optionally defines the preferred bus for Lun Disk devices.
    */
    'preferredLunBus'?: string;
    /**
    * PreferredNetworkInterfaceMultiQueue optionally enables the vhost multiqueue feature for virtio interfaces.
    */
    'preferredNetworkInterfaceMultiQueue'?: boolean;
    /**
    * Rng represents the random device passed from host
    */
    'preferredRng'?: any;
    /**
    * PreferredSoundModel optionally defines the preferred model for Sound devices.
    */
    'preferredSoundModel'?: string;
    'preferredTPM'?: V1TPMDevice;
    /**
    * PreferredUseVirtioTransitional optionally defines the preferred value of UseVirtioTransitional
    */
    'preferredUseVirtioTransitional'?: boolean;
    'preferredVirtualGPUOptions'?: V1VGPUOptions;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
//# sourceMappingURL=V1beta1DevicePreferences.d.ts.map