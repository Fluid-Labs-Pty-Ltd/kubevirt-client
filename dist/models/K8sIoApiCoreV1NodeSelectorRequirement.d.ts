/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 * @export
 * @interface K8sIoApiCoreV1NodeSelectorRequirement
 */
export interface K8sIoApiCoreV1NodeSelectorRequirement {
    /**
     * The label key that the selector applies to.
     * @type {string}
     * @memberof K8sIoApiCoreV1NodeSelectorRequirement
     */
    key: string;
    /**
     * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     *
     * Possible enum values:
     *  - `"DoesNotExist"`
     *  - `"Exists"`
     *  - `"Gt"`
     *  - `"In"`
     *  - `"Lt"`
     *  - `"NotIn"`
     * @type {string}
     * @memberof K8sIoApiCoreV1NodeSelectorRequirement
     */
    operator: K8sIoApiCoreV1NodeSelectorRequirementOperatorEnum;
    /**
     * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     * @type {Array<string>}
     * @memberof K8sIoApiCoreV1NodeSelectorRequirement
     */
    values?: Array<string>;
}
/**
 * @export
 */
export declare const K8sIoApiCoreV1NodeSelectorRequirementOperatorEnum: {
    readonly DoesNotExist: "DoesNotExist";
    readonly Exists: "Exists";
    readonly Gt: "Gt";
    readonly In: "In";
    readonly Lt: "Lt";
    readonly NotIn: "NotIn";
};
export type K8sIoApiCoreV1NodeSelectorRequirementOperatorEnum = typeof K8sIoApiCoreV1NodeSelectorRequirementOperatorEnum[keyof typeof K8sIoApiCoreV1NodeSelectorRequirementOperatorEnum];
/**
 * Check if a given object implements the K8sIoApiCoreV1NodeSelectorRequirement interface.
 */
export declare function instanceOfK8sIoApiCoreV1NodeSelectorRequirement(value: object): value is K8sIoApiCoreV1NodeSelectorRequirement;
export declare function K8sIoApiCoreV1NodeSelectorRequirementFromJSON(json: any): K8sIoApiCoreV1NodeSelectorRequirement;
export declare function K8sIoApiCoreV1NodeSelectorRequirementFromJSONTyped(json: any, ignoreDiscriminator: boolean): K8sIoApiCoreV1NodeSelectorRequirement;
export declare function K8sIoApiCoreV1NodeSelectorRequirementToJSON(json: any): K8sIoApiCoreV1NodeSelectorRequirement;
export declare function K8sIoApiCoreV1NodeSelectorRequirementToJSONTyped(value?: K8sIoApiCoreV1NodeSelectorRequirement | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=K8sIoApiCoreV1NodeSelectorRequirement.d.ts.map