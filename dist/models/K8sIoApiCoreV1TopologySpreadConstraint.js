/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { K8sIoApimachineryPkgApisMetaV1LabelSelectorFromJSON, K8sIoApimachineryPkgApisMetaV1LabelSelectorToJSON, } from './K8sIoApimachineryPkgApisMetaV1LabelSelector.js';
/**
 * @export
 */
export const K8sIoApiCoreV1TopologySpreadConstraintNodeAffinityPolicyEnum = {
    Honor: 'Honor',
    Ignore: 'Ignore'
};
/**
 * @export
 */
export const K8sIoApiCoreV1TopologySpreadConstraintNodeTaintsPolicyEnum = {
    Honor: 'Honor',
    Ignore: 'Ignore'
};
/**
 * @export
 */
export const K8sIoApiCoreV1TopologySpreadConstraintWhenUnsatisfiableEnum = {
    DoNotSchedule: 'DoNotSchedule',
    ScheduleAnyway: 'ScheduleAnyway'
};
/**
 * Check if a given object implements the K8sIoApiCoreV1TopologySpreadConstraint interface.
 */
export function instanceOfK8sIoApiCoreV1TopologySpreadConstraint(value) {
    if (!('maxSkew' in value) || value['maxSkew'] === undefined)
        return false;
    if (!('topologyKey' in value) || value['topologyKey'] === undefined)
        return false;
    if (!('whenUnsatisfiable' in value) || value['whenUnsatisfiable'] === undefined)
        return false;
    return true;
}
export function K8sIoApiCoreV1TopologySpreadConstraintFromJSON(json) {
    return K8sIoApiCoreV1TopologySpreadConstraintFromJSONTyped(json, false);
}
export function K8sIoApiCoreV1TopologySpreadConstraintFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'labelSelector': json['labelSelector'] == null ? undefined : K8sIoApimachineryPkgApisMetaV1LabelSelectorFromJSON(json['labelSelector']),
        'matchLabelKeys': json['matchLabelKeys'] == null ? undefined : json['matchLabelKeys'],
        'maxSkew': json['maxSkew'],
        'minDomains': json['minDomains'] == null ? undefined : json['minDomains'],
        'nodeAffinityPolicy': json['nodeAffinityPolicy'] == null ? undefined : json['nodeAffinityPolicy'],
        'nodeTaintsPolicy': json['nodeTaintsPolicy'] == null ? undefined : json['nodeTaintsPolicy'],
        'topologyKey': json['topologyKey'],
        'whenUnsatisfiable': json['whenUnsatisfiable'],
    };
}
export function K8sIoApiCoreV1TopologySpreadConstraintToJSON(json) {
    return K8sIoApiCoreV1TopologySpreadConstraintToJSONTyped(json, false);
}
export function K8sIoApiCoreV1TopologySpreadConstraintToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'labelSelector': K8sIoApimachineryPkgApisMetaV1LabelSelectorToJSON(value['labelSelector']),
        'matchLabelKeys': value['matchLabelKeys'],
        'maxSkew': value['maxSkew'],
        'minDomains': value['minDomains'],
        'nodeAffinityPolicy': value['nodeAffinityPolicy'],
        'nodeTaintsPolicy': value['nodeTaintsPolicy'],
        'topologyKey': value['topologyKey'],
        'whenUnsatisfiable': value['whenUnsatisfiable'],
    };
}
//# sourceMappingURL=K8sIoApiCoreV1TopologySpreadConstraint.js.map