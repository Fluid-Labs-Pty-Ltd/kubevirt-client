/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { V1CPUFeature } from './V1CPUFeature.js';
import type { V1NUMA } from './V1NUMA.js';
import type { V1Realtime } from './V1Realtime.js';
/**
 * CPU allows specifying the CPU topology.
 * @export
 * @interface V1CPU
 */
export interface V1CPU {
    /**
     * Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
     * @type {number}
     * @memberof V1CPU
     */
    cores?: number;
    /**
     * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.
     * @type {boolean}
     * @memberof V1CPU
     */
    dedicatedCpuPlacement?: boolean;
    /**
     * Features specifies the CPU features list inside the VMI.
     * @type {Array<V1CPUFeature>}
     * @memberof V1CPU
     */
    features?: Array<V1CPUFeature>;
    /**
     * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.
     * @type {boolean}
     * @memberof V1CPU
     */
    isolateEmulatorThread?: boolean;
    /**
     * MaxSockets specifies the maximum amount of sockets that can be hotplugged
     * @type {number}
     * @memberof V1CPU
     */
    maxSockets?: number;
    /**
     * Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like "host-passthrough" to get the same CPU as the node and "host-model" to get CPU closest to the node one. Defaults to host-model.
     * @type {string}
     * @memberof V1CPU
     */
    model?: string;
    /**
     *
     * @type {V1NUMA}
     * @memberof V1CPU
     */
    numa?: V1NUMA;
    /**
     *
     * @type {V1Realtime}
     * @memberof V1CPU
     */
    realtime?: V1Realtime;
    /**
     * Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
     * @type {number}
     * @memberof V1CPU
     */
    sockets?: number;
    /**
     * Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
     * @type {number}
     * @memberof V1CPU
     */
    threads?: number;
}
/**
 * Check if a given object implements the V1CPU interface.
 */
export declare function instanceOfV1CPU(value: object): value is V1CPU;
export declare function V1CPUFromJSON(json: any): V1CPU;
export declare function V1CPUFromJSONTyped(json: any, _ignoreDiscriminator: boolean): V1CPU;
export declare function V1CPUToJSON(json: any): V1CPU;
export declare function V1CPUToJSONTyped(value?: V1CPU | null, _ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=V1CPU.d.ts.map