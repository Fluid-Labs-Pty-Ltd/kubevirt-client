/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { V1SoundDevice } from './V1SoundDevice.js';
import type { V1GPU } from './V1GPU.js';
import type { V1Input } from './V1Input.js';
import type { V1Interface } from './V1Interface.js';
import type { V1Watchdog } from './V1Watchdog.js';
import type { V1HostDevice } from './V1HostDevice.js';
import type { V1TPMDevice } from './V1TPMDevice.js';
import type { V1Disk } from './V1Disk.js';
import type { V1Filesystem } from './V1Filesystem.js';
/**
 *
 * @export
 * @interface V1Devices
 */
export interface V1Devices {
    /**
     * Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true.
     * @type {boolean}
     * @memberof V1Devices
     */
    autoattachGraphicsDevice?: boolean;
    /**
     * Whether to attach an Input Device. Defaults to false.
     * @type {boolean}
     * @memberof V1Devices
     */
    autoattachInputDevice?: boolean;
    /**
     * Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true.
     * @type {boolean}
     * @memberof V1Devices
     */
    autoattachMemBalloon?: boolean;
    /**
     * Whether to attach a pod network interface. Defaults to true.
     * @type {boolean}
     * @memberof V1Devices
     */
    autoattachPodInterface?: boolean;
    /**
     * Whether to attach the default virtio-serial console or not. Serial console access will not be available if set to false. Defaults to true.
     * @type {boolean}
     * @memberof V1Devices
     */
    autoattachSerialConsole?: boolean;
    /**
     * Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false.
     * @type {boolean}
     * @memberof V1Devices
     */
    autoattachVSOCK?: boolean;
    /**
     * Whether or not to enable virtio multi-queue for block devices. Defaults to false.
     * @type {boolean}
     * @memberof V1Devices
     */
    blockMultiQueue?: boolean;
    /**
     * Represent a subset of client devices that can be accessed by VMI. At the moment only, USB devices using Usbredir's library and tooling. Another fit would be a smartcard with libcacard.
     *
     * The struct is currently empty as there is no immediate request for user-facing APIs. This structure simply turns on USB redirection of UsbClientPassthroughMaxNumberOf devices.
     * @type {object}
     * @memberof V1Devices
     */
    clientPassthrough?: object;
    /**
     * DisableHotplug disabled the ability to hotplug disks.
     * @type {boolean}
     * @memberof V1Devices
     */
    disableHotplug?: boolean;
    /**
     * Disks describes disks, cdroms and luns which are connected to the vmi.
     * @type {Array<V1Disk>}
     * @memberof V1Devices
     */
    disks?: Array<V1Disk>;
    /**
     *
     * @type {object}
     * @memberof V1Devices
     */
    downwardMetrics?: object;
    /**
     * Filesystems describes filesystem which is connected to the vmi.
     * @type {Array<V1Filesystem>}
     * @memberof V1Devices
     */
    filesystems?: Array<V1Filesystem>;
    /**
     * Whether to attach a GPU device to the vmi.
     * @type {Array<V1GPU>}
     * @memberof V1Devices
     */
    gpus?: Array<V1GPU>;
    /**
     * Whether to attach a host device to the vmi.
     * @type {Array<V1HostDevice>}
     * @memberof V1Devices
     */
    hostDevices?: Array<V1HostDevice>;
    /**
     * Inputs describe input devices
     * @type {Array<V1Input>}
     * @memberof V1Devices
     */
    inputs?: Array<V1Input>;
    /**
     * Interfaces describe network interfaces which are added to the vmi.
     * @type {Array<V1Interface>}
     * @memberof V1Devices
     */
    interfaces?: Array<V1Interface>;
    /**
     * Whether to log the auto-attached default serial console or not. Serial console logs will be collect to a file and then streamed from a named `guest-console-log`. Not relevant if autoattachSerialConsole is disabled. Defaults to cluster wide setting on VirtualMachineOptions.
     * @type {boolean}
     * @memberof V1Devices
     */
    logSerialConsole?: boolean;
    /**
     * If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
     * @type {boolean}
     * @memberof V1Devices
     */
    networkInterfaceMultiqueue?: boolean;
    /**
     * Rng represents the random device passed from host
     * @type {object}
     * @memberof V1Devices
     */
    rng?: object;
    /**
     *
     * @type {V1SoundDevice}
     * @memberof V1Devices
     */
    sound?: V1SoundDevice;
    /**
     *
     * @type {V1TPMDevice}
     * @memberof V1Devices
     */
    tpm?: V1TPMDevice;
    /**
     * Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0).
     * @type {boolean}
     * @memberof V1Devices
     */
    useVirtioTransitional?: boolean;
    /**
     *
     * @type {V1Watchdog}
     * @memberof V1Devices
     */
    watchdog?: V1Watchdog;
}
/**
 * Check if a given object implements the V1Devices interface.
 */
export declare function instanceOfV1Devices(value: object): value is V1Devices;
export declare function V1DevicesFromJSON(json: any): V1Devices;
export declare function V1DevicesFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Devices;
export declare function V1DevicesToJSON(json: any): V1Devices;
export declare function V1DevicesToJSONTyped(value?: V1Devices | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=V1Devices.d.ts.map