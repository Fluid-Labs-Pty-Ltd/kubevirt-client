/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1SoundDeviceFromJSON, V1SoundDeviceToJSON, } from './V1SoundDevice.js';
import { V1GPUFromJSON, V1GPUToJSON, } from './V1GPU.js';
import { V1InputFromJSON, V1InputToJSON, } from './V1Input.js';
import { V1InterfaceFromJSON, V1InterfaceToJSON, } from './V1Interface.js';
import { V1WatchdogFromJSON, V1WatchdogToJSON, } from './V1Watchdog.js';
import { V1HostDeviceFromJSON, V1HostDeviceToJSON, } from './V1HostDevice.js';
import { V1TPMDeviceFromJSON, V1TPMDeviceToJSON, } from './V1TPMDevice.js';
import { V1DiskFromJSON, V1DiskToJSON, } from './V1Disk.js';
import { V1FilesystemFromJSON, V1FilesystemToJSON, } from './V1Filesystem.js';
/**
 * Check if a given object implements the V1Devices interface.
 */
export function instanceOfV1Devices(value) {
    return true;
}
export function V1DevicesFromJSON(json) {
    return V1DevicesFromJSONTyped(json, false);
}
export function V1DevicesFromJSONTyped(json, _ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'autoattachGraphicsDevice': json['autoattachGraphicsDevice'] == null ? undefined : json['autoattachGraphicsDevice'],
        'autoattachInputDevice': json['autoattachInputDevice'] == null ? undefined : json['autoattachInputDevice'],
        'autoattachMemBalloon': json['autoattachMemBalloon'] == null ? undefined : json['autoattachMemBalloon'],
        'autoattachPodInterface': json['autoattachPodInterface'] == null ? undefined : json['autoattachPodInterface'],
        'autoattachSerialConsole': json['autoattachSerialConsole'] == null ? undefined : json['autoattachSerialConsole'],
        'autoattachVSOCK': json['autoattachVSOCK'] == null ? undefined : json['autoattachVSOCK'],
        'blockMultiQueue': json['blockMultiQueue'] == null ? undefined : json['blockMultiQueue'],
        'clientPassthrough': json['clientPassthrough'] == null ? undefined : json['clientPassthrough'],
        'disableHotplug': json['disableHotplug'] == null ? undefined : json['disableHotplug'],
        'disks': json['disks'] == null ? undefined : (json['disks'].map(V1DiskFromJSON)),
        'downwardMetrics': json['downwardMetrics'] == null ? undefined : json['downwardMetrics'],
        'filesystems': json['filesystems'] == null ? undefined : (json['filesystems'].map(V1FilesystemFromJSON)),
        'gpus': json['gpus'] == null ? undefined : (json['gpus'].map(V1GPUFromJSON)),
        'hostDevices': json['hostDevices'] == null ? undefined : (json['hostDevices'].map(V1HostDeviceFromJSON)),
        'inputs': json['inputs'] == null ? undefined : (json['inputs'].map(V1InputFromJSON)),
        'interfaces': json['interfaces'] == null ? undefined : (json['interfaces'].map(V1InterfaceFromJSON)),
        'logSerialConsole': json['logSerialConsole'] == null ? undefined : json['logSerialConsole'],
        'networkInterfaceMultiqueue': json['networkInterfaceMultiqueue'] == null ? undefined : json['networkInterfaceMultiqueue'],
        'rng': json['rng'] == null ? undefined : json['rng'],
        'sound': json['sound'] == null ? undefined : V1SoundDeviceFromJSON(json['sound']),
        'tpm': json['tpm'] == null ? undefined : V1TPMDeviceFromJSON(json['tpm']),
        'useVirtioTransitional': json['useVirtioTransitional'] == null ? undefined : json['useVirtioTransitional'],
        'watchdog': json['watchdog'] == null ? undefined : V1WatchdogFromJSON(json['watchdog']),
    };
}
export function V1DevicesToJSON(json) {
    return V1DevicesToJSONTyped(json, false);
}
export function V1DevicesToJSONTyped(value, _ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'autoattachGraphicsDevice': value['autoattachGraphicsDevice'],
        'autoattachInputDevice': value['autoattachInputDevice'],
        'autoattachMemBalloon': value['autoattachMemBalloon'],
        'autoattachPodInterface': value['autoattachPodInterface'],
        'autoattachSerialConsole': value['autoattachSerialConsole'],
        'autoattachVSOCK': value['autoattachVSOCK'],
        'blockMultiQueue': value['blockMultiQueue'],
        'clientPassthrough': value['clientPassthrough'],
        'disableHotplug': value['disableHotplug'],
        'disks': value['disks'] == null ? undefined : (value['disks'].map(V1DiskToJSON)),
        'downwardMetrics': value['downwardMetrics'],
        'filesystems': value['filesystems'] == null ? undefined : (value['filesystems'].map(V1FilesystemToJSON)),
        'gpus': value['gpus'] == null ? undefined : (value['gpus'].map(V1GPUToJSON)),
        'hostDevices': value['hostDevices'] == null ? undefined : (value['hostDevices'].map(V1HostDeviceToJSON)),
        'inputs': value['inputs'] == null ? undefined : (value['inputs'].map(V1InputToJSON)),
        'interfaces': value['interfaces'] == null ? undefined : (value['interfaces'].map(V1InterfaceToJSON)),
        'logSerialConsole': value['logSerialConsole'],
        'networkInterfaceMultiqueue': value['networkInterfaceMultiqueue'],
        'rng': value['rng'],
        'sound': V1SoundDeviceToJSON(value['sound']),
        'tpm': V1TPMDeviceToJSON(value['tpm']),
        'useVirtioTransitional': value['useVirtioTransitional'],
        'watchdog': V1WatchdogToJSON(value['watchdog']),
    };
}
//# sourceMappingURL=V1Devices.js.map