/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { V1DiskTarget } from './V1DiskTarget.js';
import type { V1LunTarget } from './V1LunTarget.js';
import type { V1BlockSize } from './V1BlockSize.js';
import type { V1CDRomTarget } from './V1CDRomTarget.js';
/**
 *
 * @export
 * @interface V1Disk
 */
export interface V1Disk {
    /**
     *
     * @type {V1BlockSize}
     * @memberof V1Disk
     */
    blockSize?: V1BlockSize;
    /**
     * BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.
     * @type {number}
     * @memberof V1Disk
     */
    bootOrder?: number;
    /**
     * Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.
     * @type {string}
     * @memberof V1Disk
     */
    cache?: string;
    /**
     *
     * @type {V1CDRomTarget}
     * @memberof V1Disk
     */
    cdrom?: V1CDRomTarget;
    /**
     * dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.
     * @type {boolean}
     * @memberof V1Disk
     */
    dedicatedIOThread?: boolean;
    /**
     *
     * @type {V1DiskTarget}
     * @memberof V1Disk
     */
    disk?: V1DiskTarget;
    /**
     * If specified, it can change the default error policy (stop) for the disk
     * @type {string}
     * @memberof V1Disk
     */
    errorPolicy?: string;
    /**
     * IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.
     * @type {string}
     * @memberof V1Disk
     */
    io?: string;
    /**
     *
     * @type {V1LunTarget}
     * @memberof V1Disk
     */
    lun?: V1LunTarget;
    /**
     * Name is the device name
     * @type {string}
     * @memberof V1Disk
     */
    name: string;
    /**
     * Serial provides the ability to specify a serial number for the disk device.
     * @type {string}
     * @memberof V1Disk
     */
    serial?: string;
    /**
     * If specified the disk is made sharable and multiple write from different VMs are permitted
     * @type {boolean}
     * @memberof V1Disk
     */
    shareable?: boolean;
    /**
     * If specified, disk address and its tag will be provided to the guest via config drive metadata
     * @type {string}
     * @memberof V1Disk
     */
    tag?: string;
}
/**
 * Check if a given object implements the V1Disk interface.
 */
export declare function instanceOfV1Disk(value: object): value is V1Disk;
export declare function V1DiskFromJSON(json: any): V1Disk;
export declare function V1DiskFromJSONTyped(json: any, _ignoreDiscriminator: boolean): V1Disk;
export declare function V1DiskToJSON(json: any): V1Disk;
export declare function V1DiskToJSONTyped(value?: V1Disk | null, _ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=V1Disk.d.ts.map