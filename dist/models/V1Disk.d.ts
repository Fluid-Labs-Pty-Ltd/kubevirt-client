/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1BlockSize } from '../models/V1BlockSize.js';
import { V1CDRomTarget } from '../models/V1CDRomTarget.js';
import { V1DiskTarget } from '../models/V1DiskTarget.js';
import { V1LunTarget } from '../models/V1LunTarget.js';
export declare class V1Disk {
    'blockSize'?: V1BlockSize;
    /**
    * BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.
    */
    'bootOrder'?: number;
    /**
    * Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.
    */
    'cache'?: string;
    'cdrom'?: V1CDRomTarget;
    /**
    * dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.
    */
    'dedicatedIOThread'?: boolean;
    'disk'?: V1DiskTarget;
    /**
    * If specified, it can change the default error policy (stop) for the disk
    */
    'errorPolicy'?: string;
    /**
    * IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.
    */
    'io'?: string;
    'lun'?: V1LunTarget;
    /**
    * Name is the device name
    */
    'name': string;
    /**
    * Serial provides the ability to specify a serial number for the disk device.
    */
    'serial'?: string;
    /**
    * If specified the disk is made sharable and multiple write from different VMs are permitted
    */
    'shareable'?: boolean;
    /**
    * If specified, disk address and its tag will be provided to the guest via config drive metadata
    */
    'tag'?: string;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
//# sourceMappingURL=V1Disk.d.ts.map