/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1MemoryFromJSON, V1MemoryToJSON, } from './V1Memory.js';
import { V1FirmwareFromJSON, V1FirmwareToJSON, } from './V1Firmware.js';
import { V1FeaturesFromJSON, V1FeaturesToJSON, } from './V1Features.js';
import { V1ChassisFromJSON, V1ChassisToJSON, } from './V1Chassis.js';
import { V1DevicesFromJSON, V1DevicesToJSON, } from './V1Devices.js';
import { V1ClockFromJSON, V1ClockToJSON, } from './V1Clock.js';
import { V1MachineFromJSON, V1MachineToJSON, } from './V1Machine.js';
import { V1LaunchSecurityFromJSON, V1LaunchSecurityToJSON, } from './V1LaunchSecurity.js';
import { V1CPUFromJSON, V1CPUToJSON, } from './V1CPU.js';
import { V1ResourceRequirementsFromJSON, V1ResourceRequirementsToJSON, } from './V1ResourceRequirements.js';
/**
 * Check if a given object implements the V1DomainSpec interface.
 */
export function instanceOfV1DomainSpec(value) {
    if (!('devices' in value) || value['devices'] === undefined)
        return false;
    return true;
}
export function V1DomainSpecFromJSON(json) {
    return V1DomainSpecFromJSONTyped(json, false);
}
export function V1DomainSpecFromJSONTyped(json, _ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'chassis': json['chassis'] == null ? undefined : V1ChassisFromJSON(json['chassis']),
        'clock': json['clock'] == null ? undefined : V1ClockFromJSON(json['clock']),
        'cpu': json['cpu'] == null ? undefined : V1CPUFromJSON(json['cpu']),
        'devices': V1DevicesFromJSON(json['devices']),
        'features': json['features'] == null ? undefined : V1FeaturesFromJSON(json['features']),
        'firmware': json['firmware'] == null ? undefined : V1FirmwareFromJSON(json['firmware']),
        'ioThreadsPolicy': json['ioThreadsPolicy'] == null ? undefined : json['ioThreadsPolicy'],
        'launchSecurity': json['launchSecurity'] == null ? undefined : V1LaunchSecurityFromJSON(json['launchSecurity']),
        'machine': json['machine'] == null ? undefined : V1MachineFromJSON(json['machine']),
        'memory': json['memory'] == null ? undefined : V1MemoryFromJSON(json['memory']),
        'resources': json['resources'] == null ? undefined : V1ResourceRequirementsFromJSON(json['resources']),
    };
}
export function V1DomainSpecToJSON(json) {
    return V1DomainSpecToJSONTyped(json, false);
}
export function V1DomainSpecToJSONTyped(value, _ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'chassis': V1ChassisToJSON(value['chassis']),
        'clock': V1ClockToJSON(value['clock']),
        'cpu': V1CPUToJSON(value['cpu']),
        'devices': V1DevicesToJSON(value['devices']),
        'features': V1FeaturesToJSON(value['features']),
        'firmware': V1FirmwareToJSON(value['firmware']),
        'ioThreadsPolicy': value['ioThreadsPolicy'],
        'launchSecurity': V1LaunchSecurityToJSON(value['launchSecurity']),
        'machine': V1MachineToJSON(value['machine']),
        'memory': V1MemoryToJSON(value['memory']),
        'resources': V1ResourceRequirementsToJSON(value['resources']),
    };
}
//# sourceMappingURL=V1DomainSpec.js.map