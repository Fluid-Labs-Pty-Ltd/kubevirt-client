/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1DHCPOptionsFromJSON, V1DHCPOptionsToJSON, } from './V1DHCPOptions.js';
import { V1PluginBindingFromJSON, V1PluginBindingToJSON, } from './V1PluginBinding.js';
import { V1PortFromJSON, V1PortToJSON, } from './V1Port.js';
/**
 * Check if a given object implements the V1Interface interface.
 */
export function instanceOfV1Interface(value) {
    if (!('name' in value) || value['name'] === undefined)
        return false;
    return true;
}
export function V1InterfaceFromJSON(json) {
    return V1InterfaceFromJSONTyped(json, false);
}
export function V1InterfaceFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'acpiIndex': json['acpiIndex'] == null ? undefined : json['acpiIndex'],
        'binding': json['binding'] == null ? undefined : V1PluginBindingFromJSON(json['binding']),
        'bootOrder': json['bootOrder'] == null ? undefined : json['bootOrder'],
        'bridge': json['bridge'] == null ? undefined : json['bridge'],
        'dhcpOptions': json['dhcpOptions'] == null ? undefined : V1DHCPOptionsFromJSON(json['dhcpOptions']),
        'macAddress': json['macAddress'] == null ? undefined : json['macAddress'],
        'macvtap': json['macvtap'] == null ? undefined : json['macvtap'],
        'masquerade': json['masquerade'] == null ? undefined : json['masquerade'],
        'model': json['model'] == null ? undefined : json['model'],
        'name': json['name'],
        'passt': json['passt'] == null ? undefined : json['passt'],
        'pciAddress': json['pciAddress'] == null ? undefined : json['pciAddress'],
        'ports': json['ports'] == null ? undefined : (json['ports'].map(V1PortFromJSON)),
        'slirp': json['slirp'] == null ? undefined : json['slirp'],
        'sriov': json['sriov'] == null ? undefined : json['sriov'],
        'state': json['state'] == null ? undefined : json['state'],
        'tag': json['tag'] == null ? undefined : json['tag'],
    };
}
export function V1InterfaceToJSON(json) {
    return V1InterfaceToJSONTyped(json, false);
}
export function V1InterfaceToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'acpiIndex': value['acpiIndex'],
        'binding': V1PluginBindingToJSON(value['binding']),
        'bootOrder': value['bootOrder'],
        'bridge': value['bridge'],
        'dhcpOptions': V1DHCPOptionsToJSON(value['dhcpOptions']),
        'macAddress': value['macAddress'],
        'macvtap': value['macvtap'],
        'masquerade': value['masquerade'],
        'model': value['model'],
        'name': value['name'],
        'passt': value['passt'],
        'pciAddress': value['pciAddress'],
        'ports': value['ports'] == null ? undefined : (value['ports'].map(V1PortToJSON)),
        'slirp': value['slirp'],
        'sriov': value['sriov'],
        'state': value['state'],
        'tag': value['tag'],
    };
}
//# sourceMappingURL=V1Interface.js.map