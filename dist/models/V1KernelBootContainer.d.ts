/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * If set, the VM will be booted from the defined kernel / initrd.
 * @export
 * @interface V1KernelBootContainer
 */
export interface V1KernelBootContainer {
    /**
     * Image that contains initrd / kernel files.
     * @type {string}
     * @memberof V1KernelBootContainer
     */
    image: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
     *
     * Possible enum values:
     *  - `"Always"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.
     *  - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.
     *  - `"Never"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
     * @type {string}
     * @memberof V1KernelBootContainer
     */
    imagePullPolicy?: V1KernelBootContainerImagePullPolicyEnum;
    /**
     * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
     * @type {string}
     * @memberof V1KernelBootContainer
     */
    imagePullSecret?: string;
    /**
     * the fully-qualified path to the ramdisk image in the host OS
     * @type {string}
     * @memberof V1KernelBootContainer
     */
    initrdPath?: string;
    /**
     * The fully-qualified path to the kernel image in the host OS
     * @type {string}
     * @memberof V1KernelBootContainer
     */
    kernelPath?: string;
}
/**
 * @export
 */
export declare const V1KernelBootContainerImagePullPolicyEnum: {
    readonly Always: "Always";
    readonly IfNotPresent: "IfNotPresent";
    readonly Never: "Never";
};
export type V1KernelBootContainerImagePullPolicyEnum = typeof V1KernelBootContainerImagePullPolicyEnum[keyof typeof V1KernelBootContainerImagePullPolicyEnum];
/**
 * Check if a given object implements the V1KernelBootContainer interface.
 */
export declare function instanceOfV1KernelBootContainer(value: object): value is V1KernelBootContainer;
export declare function V1KernelBootContainerFromJSON(json: any): V1KernelBootContainer;
export declare function V1KernelBootContainerFromJSONTyped(json: any, _ignoreDiscriminator: boolean): V1KernelBootContainer;
export declare function V1KernelBootContainerToJSON(json: any): V1KernelBootContainer;
export declare function V1KernelBootContainerToJSONTyped(value?: V1KernelBootContainer | null, _ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=V1KernelBootContainer.d.ts.map