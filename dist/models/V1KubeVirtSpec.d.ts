/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { V1ComponentConfig } from './V1ComponentConfig.js';
import type { V1KubeVirtConfiguration } from './V1KubeVirtConfiguration.js';
import type { V1KubeVirtWorkloadUpdateStrategy } from './V1KubeVirtWorkloadUpdateStrategy.js';
import type { K8sIoApiCoreV1LocalObjectReference } from './K8sIoApiCoreV1LocalObjectReference.js';
import type { V1CustomizeComponents } from './V1CustomizeComponents.js';
import type { V1KubeVirtCertificateRotateStrategy } from './V1KubeVirtCertificateRotateStrategy.js';
/**
 *
 * @export
 * @interface V1KubeVirtSpec
 */
export interface V1KubeVirtSpec {
    /**
     *
     * @type {V1KubeVirtCertificateRotateStrategy}
     * @memberof V1KubeVirtSpec
     */
    certificateRotateStrategy?: V1KubeVirtCertificateRotateStrategy;
    /**
     *
     * @type {V1KubeVirtConfiguration}
     * @memberof V1KubeVirtSpec
     */
    _configuration?: V1KubeVirtConfiguration;
    /**
     *
     * @type {V1CustomizeComponents}
     * @memberof V1KubeVirtSpec
     */
    customizeComponents?: V1CustomizeComponents;
    /**
     * The ImagePullPolicy to use.
     *
     * Possible enum values:
     *  - `"Always"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.
     *  - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.
     *  - `"Never"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
     * @type {string}
     * @memberof V1KubeVirtSpec
     */
    imagePullPolicy?: V1KubeVirtSpecImagePullPolicyEnum;
    /**
     * The imagePullSecrets to pull the container images from Defaults to none
     * @type {Array<K8sIoApiCoreV1LocalObjectReference>}
     * @memberof V1KubeVirtSpec
     */
    imagePullSecrets?: Array<K8sIoApiCoreV1LocalObjectReference>;
    /**
     * The image registry to pull the container images from Defaults to the same registry the operator's container image is pulled from.
     * @type {string}
     * @memberof V1KubeVirtSpec
     */
    imageRegistry?: string;
    /**
     * The image tag to use for the continer images installed. Defaults to the same tag as the operator's container image.
     * @type {string}
     * @memberof V1KubeVirtSpec
     */
    imageTag?: string;
    /**
     *
     * @type {V1ComponentConfig}
     * @memberof V1KubeVirtSpec
     */
    infra?: V1ComponentConfig;
    /**
     * The name of the Prometheus service account that needs read-access to KubeVirt endpoints Defaults to prometheus-k8s
     * @type {string}
     * @memberof V1KubeVirtSpec
     */
    monitorAccount?: string;
    /**
     * The namespace Prometheus is deployed in Defaults to openshift-monitor
     * @type {string}
     * @memberof V1KubeVirtSpec
     */
    monitorNamespace?: string;
    /**
     * Designate the apps.kubevirt.io/component label for KubeVirt components. Useful if KubeVirt is included as part of a product. If ProductComponent is not specified, the component label default value is kubevirt.
     * @type {string}
     * @memberof V1KubeVirtSpec
     */
    productComponent?: string;
    /**
     * Designate the apps.kubevirt.io/part-of label for KubeVirt components. Useful if KubeVirt is included as part of a product. If ProductName is not specified, the part-of label will be omitted.
     * @type {string}
     * @memberof V1KubeVirtSpec
     */
    productName?: string;
    /**
     * Designate the apps.kubevirt.io/version label for KubeVirt components. Useful if KubeVirt is included as part of a product. If ProductVersion is not specified, KubeVirt's version will be used.
     * @type {string}
     * @memberof V1KubeVirtSpec
     */
    productVersion?: string;
    /**
     * The namespace the service monitor will be deployed
     *  When ServiceMonitorNamespace is set, then we'll install the service monitor object in that namespace
     * otherwise we will use the monitoring namespace.
     * @type {string}
     * @memberof V1KubeVirtSpec
     */
    serviceMonitorNamespace?: string;
    /**
     * Specifies if kubevirt can be deleted if workloads are still present. This is mainly a precaution to avoid accidental data loss
     * @type {string}
     * @memberof V1KubeVirtSpec
     */
    uninstallStrategy?: string;
    /**
     *
     * @type {V1KubeVirtWorkloadUpdateStrategy}
     * @memberof V1KubeVirtSpec
     */
    workloadUpdateStrategy?: V1KubeVirtWorkloadUpdateStrategy;
    /**
     *
     * @type {V1ComponentConfig}
     * @memberof V1KubeVirtSpec
     */
    workloads?: V1ComponentConfig;
}
/**
 * @export
 */
export declare const V1KubeVirtSpecImagePullPolicyEnum: {
    readonly Always: "Always";
    readonly IfNotPresent: "IfNotPresent";
    readonly Never: "Never";
};
export type V1KubeVirtSpecImagePullPolicyEnum = typeof V1KubeVirtSpecImagePullPolicyEnum[keyof typeof V1KubeVirtSpecImagePullPolicyEnum];
/**
 * Check if a given object implements the V1KubeVirtSpec interface.
 */
export declare function instanceOfV1KubeVirtSpec(value: object): value is V1KubeVirtSpec;
export declare function V1KubeVirtSpecFromJSON(json: any): V1KubeVirtSpec;
export declare function V1KubeVirtSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1KubeVirtSpec;
export declare function V1KubeVirtSpecToJSON(json: any): V1KubeVirtSpec;
export declare function V1KubeVirtSpecToJSONTyped(value?: V1KubeVirtSpec | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=V1KubeVirtSpec.d.ts.map