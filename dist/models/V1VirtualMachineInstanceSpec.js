/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1NetworkFromJSON, V1NetworkToJSON, } from './V1Network.js';
import { V1VolumeFromJSON, V1VolumeToJSON, } from './V1Volume.js';
import { K8sIoApiCoreV1AffinityFromJSON, K8sIoApiCoreV1AffinityToJSON, } from './K8sIoApiCoreV1Affinity.js';
import { K8sIoApiCoreV1TopologySpreadConstraintFromJSON, K8sIoApiCoreV1TopologySpreadConstraintToJSON, } from './K8sIoApiCoreV1TopologySpreadConstraint.js';
import { V1ProbeFromJSON, V1ProbeToJSON, } from './V1Probe.js';
import { V1AccessCredentialFromJSON, V1AccessCredentialToJSON, } from './V1AccessCredential.js';
import { K8sIoApiCoreV1PodDNSConfigFromJSON, K8sIoApiCoreV1PodDNSConfigToJSON, } from './K8sIoApiCoreV1PodDNSConfig.js';
import { K8sIoApiCoreV1TolerationFromJSON, K8sIoApiCoreV1TolerationToJSON, } from './K8sIoApiCoreV1Toleration.js';
import { V1DomainSpecFromJSON, V1DomainSpecToJSON, } from './V1DomainSpec.js';
/**
 * @export
 */
export const V1VirtualMachineInstanceSpecDnsPolicyEnum = {
    ClusterFirst: 'ClusterFirst',
    ClusterFirstWithHostNet: 'ClusterFirstWithHostNet',
    Default: 'Default',
    None: 'None'
};
/**
 * Check if a given object implements the V1VirtualMachineInstanceSpec interface.
 */
export function instanceOfV1VirtualMachineInstanceSpec(value) {
    if (!('domain' in value) || value['domain'] === undefined)
        return false;
    return true;
}
export function V1VirtualMachineInstanceSpecFromJSON(json) {
    return V1VirtualMachineInstanceSpecFromJSONTyped(json, false);
}
export function V1VirtualMachineInstanceSpecFromJSONTyped(json, _ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'accessCredentials': json['accessCredentials'] == null ? undefined : (json['accessCredentials'].map(V1AccessCredentialFromJSON)),
        'affinity': json['affinity'] == null ? undefined : K8sIoApiCoreV1AffinityFromJSON(json['affinity']),
        'architecture': json['architecture'] == null ? undefined : json['architecture'],
        'dnsConfig': json['dnsConfig'] == null ? undefined : K8sIoApiCoreV1PodDNSConfigFromJSON(json['dnsConfig']),
        'dnsPolicy': json['dnsPolicy'] == null ? undefined : json['dnsPolicy'],
        'domain': V1DomainSpecFromJSON(json['domain']),
        'evictionStrategy': json['evictionStrategy'] == null ? undefined : json['evictionStrategy'],
        'hostname': json['hostname'] == null ? undefined : json['hostname'],
        'livenessProbe': json['livenessProbe'] == null ? undefined : V1ProbeFromJSON(json['livenessProbe']),
        'networks': json['networks'] == null ? undefined : (json['networks'].map(V1NetworkFromJSON)),
        'nodeSelector': json['nodeSelector'] == null ? undefined : json['nodeSelector'],
        'priorityClassName': json['priorityClassName'] == null ? undefined : json['priorityClassName'],
        'readinessProbe': json['readinessProbe'] == null ? undefined : V1ProbeFromJSON(json['readinessProbe']),
        'schedulerName': json['schedulerName'] == null ? undefined : json['schedulerName'],
        'startStrategy': json['startStrategy'] == null ? undefined : json['startStrategy'],
        'subdomain': json['subdomain'] == null ? undefined : json['subdomain'],
        'terminationGracePeriodSeconds': json['terminationGracePeriodSeconds'] == null ? undefined : json['terminationGracePeriodSeconds'],
        'tolerations': json['tolerations'] == null ? undefined : (json['tolerations'].map(K8sIoApiCoreV1TolerationFromJSON)),
        'topologySpreadConstraints': json['topologySpreadConstraints'] == null ? undefined : (json['topologySpreadConstraints'].map(K8sIoApiCoreV1TopologySpreadConstraintFromJSON)),
        'volumes': json['volumes'] == null ? undefined : (json['volumes'].map(V1VolumeFromJSON)),
    };
}
export function V1VirtualMachineInstanceSpecToJSON(json) {
    return V1VirtualMachineInstanceSpecToJSONTyped(json, false);
}
export function V1VirtualMachineInstanceSpecToJSONTyped(value, _ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'accessCredentials': value['accessCredentials'] == null ? undefined : (value['accessCredentials'].map(V1AccessCredentialToJSON)),
        'affinity': K8sIoApiCoreV1AffinityToJSON(value['affinity']),
        'architecture': value['architecture'],
        'dnsConfig': K8sIoApiCoreV1PodDNSConfigToJSON(value['dnsConfig']),
        'dnsPolicy': value['dnsPolicy'],
        'domain': V1DomainSpecToJSON(value['domain']),
        'evictionStrategy': value['evictionStrategy'],
        'hostname': value['hostname'],
        'livenessProbe': V1ProbeToJSON(value['livenessProbe']),
        'networks': value['networks'] == null ? undefined : (value['networks'].map(V1NetworkToJSON)),
        'nodeSelector': value['nodeSelector'],
        'priorityClassName': value['priorityClassName'],
        'readinessProbe': V1ProbeToJSON(value['readinessProbe']),
        'schedulerName': value['schedulerName'],
        'startStrategy': value['startStrategy'],
        'subdomain': value['subdomain'],
        'terminationGracePeriodSeconds': value['terminationGracePeriodSeconds'],
        'tolerations': value['tolerations'] == null ? undefined : (value['tolerations'].map(K8sIoApiCoreV1TolerationToJSON)),
        'topologySpreadConstraints': value['topologySpreadConstraints'] == null ? undefined : (value['topologySpreadConstraints'].map(K8sIoApiCoreV1TopologySpreadConstraintToJSON)),
        'volumes': value['volumes'] == null ? undefined : (value['volumes'].map(V1VolumeToJSON)),
    };
}
//# sourceMappingURL=V1VirtualMachineInstanceSpec.js.map