/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1PreferenceMatcherFromJSON, V1PreferenceMatcherToJSON, } from './V1PreferenceMatcher.js';
import { V1DataVolumeTemplateSpecFromJSON, V1DataVolumeTemplateSpecToJSON, } from './V1DataVolumeTemplateSpec.js';
import { V1InstancetypeMatcherFromJSON, V1InstancetypeMatcherToJSON, } from './V1InstancetypeMatcher.js';
import { V1VirtualMachineInstanceTemplateSpecFromJSON, V1VirtualMachineInstanceTemplateSpecToJSON, } from './V1VirtualMachineInstanceTemplateSpec.js';
/**
 * Check if a given object implements the V1VirtualMachineSpec interface.
 */
export function instanceOfV1VirtualMachineSpec(value) {
    if (!('template' in value) || value['template'] === undefined)
        return false;
    return true;
}
export function V1VirtualMachineSpecFromJSON(json) {
    return V1VirtualMachineSpecFromJSONTyped(json, false);
}
export function V1VirtualMachineSpecFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'dataVolumeTemplates': json['dataVolumeTemplates'] == null ? undefined : (json['dataVolumeTemplates'].map(V1DataVolumeTemplateSpecFromJSON)),
        'instancetype': json['instancetype'] == null ? undefined : V1InstancetypeMatcherFromJSON(json['instancetype']),
        'preference': json['preference'] == null ? undefined : V1PreferenceMatcherFromJSON(json['preference']),
        'runStrategy': json['runStrategy'] == null ? undefined : json['runStrategy'],
        'running': json['running'] == null ? undefined : json['running'],
        'template': V1VirtualMachineInstanceTemplateSpecFromJSON(json['template']),
        'updateVolumesStrategy': json['updateVolumesStrategy'] == null ? undefined : json['updateVolumesStrategy'],
    };
}
export function V1VirtualMachineSpecToJSON(json) {
    return V1VirtualMachineSpecToJSONTyped(json, false);
}
export function V1VirtualMachineSpecToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'dataVolumeTemplates': value['dataVolumeTemplates'] == null ? undefined : (value['dataVolumeTemplates'].map(V1DataVolumeTemplateSpecToJSON)),
        'instancetype': V1InstancetypeMatcherToJSON(value['instancetype']),
        'preference': V1PreferenceMatcherToJSON(value['preference']),
        'runStrategy': value['runStrategy'],
        'running': value['running'],
        'template': V1VirtualMachineInstanceTemplateSpecToJSON(value['template']),
        'updateVolumesStrategy': value['updateVolumesStrategy'],
    };
}
//# sourceMappingURL=V1VirtualMachineSpec.js.map