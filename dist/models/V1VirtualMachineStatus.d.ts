/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { V1VirtualMachineCondition } from './V1VirtualMachineCondition.js';
import type { V1VirtualMachineStartFailure } from './V1VirtualMachineStartFailure.js';
import type { V1VirtualMachineStateChangeRequest } from './V1VirtualMachineStateChangeRequest.js';
import type { V1VirtualMachineVolumeRequest } from './V1VirtualMachineVolumeRequest.js';
import type { V1VolumeSnapshotStatus } from './V1VolumeSnapshotStatus.js';
import type { V1VolumeUpdateState } from './V1VolumeUpdateState.js';
import type { V1VirtualMachineMemoryDumpRequest } from './V1VirtualMachineMemoryDumpRequest.js';
/**
 * VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing
 * @export
 * @interface V1VirtualMachineStatus
 */
export interface V1VirtualMachineStatus {
    /**
     * Hold the state information of the VirtualMachine and its VirtualMachineInstance
     * @type {Array<V1VirtualMachineCondition>}
     * @memberof V1VirtualMachineStatus
     */
    conditions?: Array<V1VirtualMachineCondition>;
    /**
     * Created indicates if the virtual machine is created in the cluster
     * @type {boolean}
     * @memberof V1VirtualMachineStatus
     */
    created?: boolean;
    /**
     * DesiredGeneration is the generation which is desired for the VMI. This will be used in comparisons with ObservedGeneration to understand when the VMI is out of sync. This will be changed at the same time as ObservedGeneration to remove errors which could occur if Generation is updated through an Update() before ObservedGeneration in Status.
     * @type {number}
     * @memberof V1VirtualMachineStatus
     */
    desiredGeneration?: number;
    /**
     *
     * @type {V1VirtualMachineMemoryDumpRequest}
     * @memberof V1VirtualMachineStatus
     */
    memoryDumpRequest?: V1VirtualMachineMemoryDumpRequest;
    /**
     * ObservedGeneration is the generation observed by the vmi when started.
     * @type {number}
     * @memberof V1VirtualMachineStatus
     */
    observedGeneration?: number;
    /**
     * PrintableStatus is a human readable, high-level representation of the status of the virtual machine
     * @type {string}
     * @memberof V1VirtualMachineStatus
     */
    printableStatus?: string;
    /**
     * Ready indicates if the virtual machine is running and ready
     * @type {boolean}
     * @memberof V1VirtualMachineStatus
     */
    ready?: boolean;
    /**
     * RestoreInProgress is the name of the VirtualMachineRestore currently executing
     * @type {string}
     * @memberof V1VirtualMachineStatus
     */
    restoreInProgress?: string;
    /**
     * RunStrategy tracks the last recorded RunStrategy used by the VM. This is needed to correctly process the next strategy (for now only the RerunOnFailure)
     * @type {string}
     * @memberof V1VirtualMachineStatus
     */
    runStrategy?: string;
    /**
     * SnapshotInProgress is the name of the VirtualMachineSnapshot currently executing
     * @type {string}
     * @memberof V1VirtualMachineStatus
     */
    snapshotInProgress?: string;
    /**
     *
     * @type {V1VirtualMachineStartFailure}
     * @memberof V1VirtualMachineStatus
     */
    startFailure?: V1VirtualMachineStartFailure;
    /**
     * StateChangeRequests indicates a list of actions that should be taken on a VMI e.g. stop a specific VMI then start a new one.
     * @type {Array<V1VirtualMachineStateChangeRequest>}
     * @memberof V1VirtualMachineStatus
     */
    stateChangeRequests?: Array<V1VirtualMachineStateChangeRequest>;
    /**
     * VolumeRequests indicates a list of volumes add or remove from the VMI template and hotplug on an active running VMI.
     * @type {Array<V1VirtualMachineVolumeRequest>}
     * @memberof V1VirtualMachineStatus
     */
    volumeRequests?: Array<V1VirtualMachineVolumeRequest>;
    /**
     * VolumeSnapshotStatuses indicates a list of statuses whether snapshotting is supported by each volume.
     * @type {Array<V1VolumeSnapshotStatus>}
     * @memberof V1VirtualMachineStatus
     */
    volumeSnapshotStatuses?: Array<V1VolumeSnapshotStatus>;
    /**
     *
     * @type {V1VolumeUpdateState}
     * @memberof V1VirtualMachineStatus
     */
    volumeUpdateState?: V1VolumeUpdateState;
}
/**
 * Check if a given object implements the V1VirtualMachineStatus interface.
 */
export declare function instanceOfV1VirtualMachineStatus(value: object): value is V1VirtualMachineStatus;
export declare function V1VirtualMachineStatusFromJSON(json: any): V1VirtualMachineStatus;
export declare function V1VirtualMachineStatusFromJSONTyped(json: any, _ignoreDiscriminator: boolean): V1VirtualMachineStatus;
export declare function V1VirtualMachineStatusToJSON(json: any): V1VirtualMachineStatus;
export declare function V1VirtualMachineStatusToJSONTyped(value?: V1VirtualMachineStatus | null, _ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=V1VirtualMachineStatus.d.ts.map