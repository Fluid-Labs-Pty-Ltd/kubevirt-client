/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* CPUInstancetype contains the CPU related configuration of a given VirtualMachineInstancetypeSpec.  Guest is a required attribute and defines the number of vCPUs to be exposed to the guest by the instancetype.
*/
export class V1beta1CPUInstancetype {
    /**
    * DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.
    */
    'dedicatedCPUPlacement';
    /**
    * Required number of vCPUs to expose to the guest.  The resulting CPU topology being derived from the optional PreferredCPUTopology attribute of CPUPreferences that itself defaults to PreferSockets.
    */
    'guest';
    /**
    * IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.
    */
    'isolateEmulatorThread';
    /**
    * MaxSockets specifies the maximum amount of sockets that can be hotplugged
    */
    'maxSockets';
    /**
    * Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \"host-passthrough\" to get the same CPU as the node and \"host-model\" to get CPU closest to the node one. Defaults to host-model.
    */
    'model';
    'numa';
    'realtime';
    static discriminator = undefined;
    static mapping = undefined;
    static attributeTypeMap = [
        {
            "name": "dedicatedCPUPlacement",
            "baseName": "dedicatedCPUPlacement",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "guest",
            "baseName": "guest",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "isolateEmulatorThread",
            "baseName": "isolateEmulatorThread",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "maxSockets",
            "baseName": "maxSockets",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "model",
            "baseName": "model",
            "type": "string",
            "format": ""
        },
        {
            "name": "numa",
            "baseName": "numa",
            "type": "V1NUMA",
            "format": ""
        },
        {
            "name": "realtime",
            "baseName": "realtime",
            "type": "V1Realtime",
            "format": ""
        }
    ];
    static getAttributeTypeMap() {
        return V1beta1CPUInstancetype.attributeTypeMap;
    }
    constructor() {
    }
}
//# sourceMappingURL=V1beta1CPUInstancetype.js.map