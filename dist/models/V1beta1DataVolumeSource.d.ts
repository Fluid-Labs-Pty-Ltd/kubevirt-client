/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { V1beta1DataVolumeSourcePVC } from './V1beta1DataVolumeSourcePVC.js';
import type { V1beta1DataVolumeSourceRegistry } from './V1beta1DataVolumeSourceRegistry.js';
import type { V1beta1DataVolumeSourceImageIO } from './V1beta1DataVolumeSourceImageIO.js';
import type { V1beta1DataVolumeSourceVDDK } from './V1beta1DataVolumeSourceVDDK.js';
import type { V1beta1DataVolumeSourceGCS } from './V1beta1DataVolumeSourceGCS.js';
import type { V1beta1DataVolumeSourceHTTP } from './V1beta1DataVolumeSourceHTTP.js';
import type { V1beta1DataVolumeSourceS3 } from './V1beta1DataVolumeSourceS3.js';
import type { V1beta1DataVolumeSourceSnapshot } from './V1beta1DataVolumeSourceSnapshot.js';
/**
 * DataVolumeSource represents the source for our Data Volume, this can be HTTP, Imageio, S3, GCS, Registry or an existing PVC
 * @export
 * @interface V1beta1DataVolumeSource
 */
export interface V1beta1DataVolumeSource {
    /**
     * DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC
     * @type {object}
     * @memberof V1beta1DataVolumeSource
     */
    blank?: object;
    /**
     *
     * @type {V1beta1DataVolumeSourceGCS}
     * @memberof V1beta1DataVolumeSource
     */
    gcs?: V1beta1DataVolumeSourceGCS;
    /**
     *
     * @type {V1beta1DataVolumeSourceHTTP}
     * @memberof V1beta1DataVolumeSource
     */
    http?: V1beta1DataVolumeSourceHTTP;
    /**
     *
     * @type {V1beta1DataVolumeSourceImageIO}
     * @memberof V1beta1DataVolumeSource
     */
    imageio?: V1beta1DataVolumeSourceImageIO;
    /**
     *
     * @type {V1beta1DataVolumeSourcePVC}
     * @memberof V1beta1DataVolumeSource
     */
    pvc?: V1beta1DataVolumeSourcePVC;
    /**
     *
     * @type {V1beta1DataVolumeSourceRegistry}
     * @memberof V1beta1DataVolumeSource
     */
    registry?: V1beta1DataVolumeSourceRegistry;
    /**
     *
     * @type {V1beta1DataVolumeSourceS3}
     * @memberof V1beta1DataVolumeSource
     */
    s3?: V1beta1DataVolumeSourceS3;
    /**
     *
     * @type {V1beta1DataVolumeSourceSnapshot}
     * @memberof V1beta1DataVolumeSource
     */
    snapshot?: V1beta1DataVolumeSourceSnapshot;
    /**
     * DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source
     * @type {object}
     * @memberof V1beta1DataVolumeSource
     */
    upload?: object;
    /**
     *
     * @type {V1beta1DataVolumeSourceVDDK}
     * @memberof V1beta1DataVolumeSource
     */
    vddk?: V1beta1DataVolumeSourceVDDK;
}
/**
 * Check if a given object implements the V1beta1DataVolumeSource interface.
 */
export declare function instanceOfV1beta1DataVolumeSource(value: object): value is V1beta1DataVolumeSource;
export declare function V1beta1DataVolumeSourceFromJSON(json: any): V1beta1DataVolumeSource;
export declare function V1beta1DataVolumeSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1DataVolumeSource;
export declare function V1beta1DataVolumeSourceToJSON(json: any): V1beta1DataVolumeSource;
export declare function V1beta1DataVolumeSourceToJSONTyped(value?: V1beta1DataVolumeSource | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=V1beta1DataVolumeSource.d.ts.map