/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1beta1DataVolumeSourceGCS } from '../models/V1beta1DataVolumeSourceGCS.js';
import { V1beta1DataVolumeSourceHTTP } from '../models/V1beta1DataVolumeSourceHTTP.js';
import { V1beta1DataVolumeSourceImageIO } from '../models/V1beta1DataVolumeSourceImageIO.js';
import { V1beta1DataVolumeSourcePVC } from '../models/V1beta1DataVolumeSourcePVC.js';
import { V1beta1DataVolumeSourceRegistry } from '../models/V1beta1DataVolumeSourceRegistry.js';
import { V1beta1DataVolumeSourceS3 } from '../models/V1beta1DataVolumeSourceS3.js';
import { V1beta1DataVolumeSourceSnapshot } from '../models/V1beta1DataVolumeSourceSnapshot.js';
import { V1beta1DataVolumeSourceVDDK } from '../models/V1beta1DataVolumeSourceVDDK.js';
/**
* DataVolumeSource represents the source for our Data Volume, this can be HTTP, Imageio, S3, GCS, Registry or an existing PVC
*/
export declare class V1beta1DataVolumeSource {
    /**
    * DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC
    */
    'blank'?: any;
    'gcs'?: V1beta1DataVolumeSourceGCS;
    'http'?: V1beta1DataVolumeSourceHTTP;
    'imageio'?: V1beta1DataVolumeSourceImageIO;
    'pvc'?: V1beta1DataVolumeSourcePVC;
    'registry'?: V1beta1DataVolumeSourceRegistry;
    's3'?: V1beta1DataVolumeSourceS3;
    'snapshot'?: V1beta1DataVolumeSourceSnapshot;
    /**
    * DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source
    */
    'upload'?: any;
    'vddk'?: V1beta1DataVolumeSourceVDDK;
    static readonly discriminator: string | undefined;
    static readonly mapping: {
        [index: string]: string;
    } | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
//# sourceMappingURL=V1beta1DataVolumeSource.d.ts.map