/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { K8sIoApiCoreV1PersistentVolumeClaimSpec } from './K8sIoApiCoreV1PersistentVolumeClaimSpec.js';
import type { V1beta1DataVolumeSource } from './V1beta1DataVolumeSource.js';
import type { V1beta1StorageSpec } from './V1beta1StorageSpec.js';
import type { V1beta1DataVolumeSourceRef } from './V1beta1DataVolumeSourceRef.js';
import type { V1beta1DataVolumeCheckpoint } from './V1beta1DataVolumeCheckpoint.js';
/**
 * DataVolumeSpec defines the DataVolume type specification
 * @export
 * @interface V1beta1DataVolumeSpec
 */
export interface V1beta1DataVolumeSpec {
    /**
     * Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.
     * @type {Array<V1beta1DataVolumeCheckpoint>}
     * @memberof V1beta1DataVolumeSpec
     */
    checkpoints?: Array<V1beta1DataVolumeCheckpoint>;
    /**
     * DataVolumeContentType options: "kubevirt", "archive"
     * @type {string}
     * @memberof V1beta1DataVolumeSpec
     */
    contentType?: string;
    /**
     * FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.
     * @type {boolean}
     * @memberof V1beta1DataVolumeSpec
     */
    finalCheckpoint?: boolean;
    /**
     * Preallocation controls whether storage for DataVolumes should be allocated in advance.
     * @type {boolean}
     * @memberof V1beta1DataVolumeSpec
     */
    preallocation?: boolean;
    /**
     * PriorityClassName for Importer, Cloner and Uploader pod
     * @type {string}
     * @memberof V1beta1DataVolumeSpec
     */
    priorityClassName?: string;
    /**
     *
     * @type {K8sIoApiCoreV1PersistentVolumeClaimSpec}
     * @memberof V1beta1DataVolumeSpec
     */
    pvc?: K8sIoApiCoreV1PersistentVolumeClaimSpec;
    /**
     *
     * @type {V1beta1DataVolumeSource}
     * @memberof V1beta1DataVolumeSpec
     */
    source?: V1beta1DataVolumeSource;
    /**
     *
     * @type {V1beta1DataVolumeSourceRef}
     * @memberof V1beta1DataVolumeSpec
     */
    sourceRef?: V1beta1DataVolumeSourceRef;
    /**
     *
     * @type {V1beta1StorageSpec}
     * @memberof V1beta1DataVolumeSpec
     */
    storage?: V1beta1StorageSpec;
}
/**
 * Check if a given object implements the V1beta1DataVolumeSpec interface.
 */
export declare function instanceOfV1beta1DataVolumeSpec(value: object): value is V1beta1DataVolumeSpec;
export declare function V1beta1DataVolumeSpecFromJSON(json: any): V1beta1DataVolumeSpec;
export declare function V1beta1DataVolumeSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1DataVolumeSpec;
export declare function V1beta1DataVolumeSpecToJSON(json: any): V1beta1DataVolumeSpec;
export declare function V1beta1DataVolumeSpecToJSONTyped(value?: V1beta1DataVolumeSpec | null, ignoreDiscriminator?: boolean): any;
//# sourceMappingURL=V1beta1DataVolumeSpec.d.ts.map