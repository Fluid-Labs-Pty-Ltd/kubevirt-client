/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* StorageSpec defines the Storage type specification
*/
export class V1beta1StorageSpec {
    /**
    * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    */
    'accessModes';
    'dataSource';
    'dataSourceRef';
    'resources';
    'selector';
    /**
    * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    */
    'storageClassName';
    /**
    * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.  Possible enum values:  - `\"Block\"` means the volume will not be formatted with a filesystem and will remain a raw block device.  - `\"Filesystem\"` means the volume will be or is formatted with a filesystem.
    */
    'volumeMode';
    /**
    * VolumeName is the binding reference to the PersistentVolume backing this claim.
    */
    'volumeName';
    static discriminator = undefined;
    static mapping = undefined;
    static attributeTypeMap = [
        {
            "name": "accessModes",
            "baseName": "accessModes",
            "type": "Array<V1beta1StorageSpecAccessModesEnum>",
            "format": ""
        },
        {
            "name": "dataSource",
            "baseName": "dataSource",
            "type": "K8sIoApiCoreV1TypedLocalObjectReference",
            "format": ""
        },
        {
            "name": "dataSourceRef",
            "baseName": "dataSourceRef",
            "type": "K8sIoApiCoreV1TypedObjectReference",
            "format": ""
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "K8sIoApiCoreV1ResourceRequirements",
            "format": ""
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "K8sIoApimachineryPkgApisMetaV1LabelSelector",
            "format": ""
        },
        {
            "name": "storageClassName",
            "baseName": "storageClassName",
            "type": "string",
            "format": ""
        },
        {
            "name": "volumeMode",
            "baseName": "volumeMode",
            "type": "V1beta1StorageSpecVolumeModeEnum",
            "format": ""
        },
        {
            "name": "volumeName",
            "baseName": "volumeName",
            "type": "string",
            "format": ""
        }
    ];
    static getAttributeTypeMap() {
        return V1beta1StorageSpec.attributeTypeMap;
    }
    constructor() {
    }
}
export var V1beta1StorageSpecAccessModesEnum;
(function (V1beta1StorageSpecAccessModesEnum) {
    V1beta1StorageSpecAccessModesEnum["ReadOnlyMany"] = "ReadOnlyMany";
    V1beta1StorageSpecAccessModesEnum["ReadWriteMany"] = "ReadWriteMany";
    V1beta1StorageSpecAccessModesEnum["ReadWriteOnce"] = "ReadWriteOnce";
    V1beta1StorageSpecAccessModesEnum["ReadWriteOncePod"] = "ReadWriteOncePod";
})(V1beta1StorageSpecAccessModesEnum || (V1beta1StorageSpecAccessModesEnum = {}));
export var V1beta1StorageSpecVolumeModeEnum;
(function (V1beta1StorageSpecVolumeModeEnum) {
    V1beta1StorageSpecVolumeModeEnum["Block"] = "Block";
    V1beta1StorageSpecVolumeModeEnum["Filesystem"] = "Filesystem";
})(V1beta1StorageSpecVolumeModeEnum || (V1beta1StorageSpecVolumeModeEnum = {}));
//# sourceMappingURL=V1beta1StorageSpec.js.map