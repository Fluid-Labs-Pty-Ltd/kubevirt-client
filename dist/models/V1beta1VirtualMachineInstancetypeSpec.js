/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1GPUFromJSON, V1GPUToJSON, } from './V1GPU.js';
import { V1beta1CPUInstancetypeFromJSON, V1beta1CPUInstancetypeToJSON, } from './V1beta1CPUInstancetype.js';
import { V1HostDeviceFromJSON, V1HostDeviceToJSON, } from './V1HostDevice.js';
import { V1LaunchSecurityFromJSON, V1LaunchSecurityToJSON, } from './V1LaunchSecurity.js';
import { V1beta1MemoryInstancetypeFromJSON, V1beta1MemoryInstancetypeToJSON, } from './V1beta1MemoryInstancetype.js';
/**
 * Check if a given object implements the V1beta1VirtualMachineInstancetypeSpec interface.
 */
export function instanceOfV1beta1VirtualMachineInstancetypeSpec(value) {
    if (!('cpu' in value) || value['cpu'] === undefined)
        return false;
    if (!('memory' in value) || value['memory'] === undefined)
        return false;
    return true;
}
export function V1beta1VirtualMachineInstancetypeSpecFromJSON(json) {
    return V1beta1VirtualMachineInstancetypeSpecFromJSONTyped(json, false);
}
export function V1beta1VirtualMachineInstancetypeSpecFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'annotations': json['annotations'] == null ? undefined : json['annotations'],
        'cpu': V1beta1CPUInstancetypeFromJSON(json['cpu']),
        'gpus': json['gpus'] == null ? undefined : (json['gpus'].map(V1GPUFromJSON)),
        'hostDevices': json['hostDevices'] == null ? undefined : (json['hostDevices'].map(V1HostDeviceFromJSON)),
        'ioThreadsPolicy': json['ioThreadsPolicy'] == null ? undefined : json['ioThreadsPolicy'],
        'launchSecurity': json['launchSecurity'] == null ? undefined : V1LaunchSecurityFromJSON(json['launchSecurity']),
        'memory': V1beta1MemoryInstancetypeFromJSON(json['memory']),
        'nodeSelector': json['nodeSelector'] == null ? undefined : json['nodeSelector'],
        'schedulerName': json['schedulerName'] == null ? undefined : json['schedulerName'],
    };
}
export function V1beta1VirtualMachineInstancetypeSpecToJSON(json) {
    return V1beta1VirtualMachineInstancetypeSpecToJSONTyped(json, false);
}
export function V1beta1VirtualMachineInstancetypeSpecToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'annotations': value['annotations'],
        'cpu': V1beta1CPUInstancetypeToJSON(value['cpu']),
        'gpus': value['gpus'] == null ? undefined : (value['gpus'].map(V1GPUToJSON)),
        'hostDevices': value['hostDevices'] == null ? undefined : (value['hostDevices'].map(V1HostDeviceToJSON)),
        'ioThreadsPolicy': value['ioThreadsPolicy'],
        'launchSecurity': V1LaunchSecurityToJSON(value['launchSecurity']),
        'memory': V1beta1MemoryInstancetypeToJSON(value['memory']),
        'nodeSelector': value['nodeSelector'],
        'schedulerName': value['schedulerName'],
    };
}
//# sourceMappingURL=V1beta1VirtualMachineInstancetypeSpec.js.map