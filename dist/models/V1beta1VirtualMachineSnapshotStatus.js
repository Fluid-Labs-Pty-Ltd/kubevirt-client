/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { V1beta1ErrorFromJSON, V1beta1ErrorToJSON, } from './V1beta1Error.js';
import { V1beta1SnapshotVolumesListsFromJSON, V1beta1SnapshotVolumesListsToJSON, } from './V1beta1SnapshotVolumesLists.js';
import { V1beta1ConditionFromJSON, V1beta1ConditionToJSON, } from './V1beta1Condition.js';
/**
 * Check if a given object implements the V1beta1VirtualMachineSnapshotStatus interface.
 */
export function instanceOfV1beta1VirtualMachineSnapshotStatus(value) {
    return true;
}
export function V1beta1VirtualMachineSnapshotStatusFromJSON(json) {
    return V1beta1VirtualMachineSnapshotStatusFromJSONTyped(json, false);
}
export function V1beta1VirtualMachineSnapshotStatusFromJSONTyped(json, _ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'conditions': json['conditions'] == null ? undefined : (json['conditions'].map(V1beta1ConditionFromJSON)),
        'creationTime': json['creationTime'] == null ? undefined : json['creationTime'],
        'error': json['error'] == null ? undefined : V1beta1ErrorFromJSON(json['error']),
        'indications': json['indications'] == null ? undefined : json['indications'],
        'phase': json['phase'] == null ? undefined : json['phase'],
        'readyToUse': json['readyToUse'] == null ? undefined : json['readyToUse'],
        'snapshotVolumes': json['snapshotVolumes'] == null ? undefined : V1beta1SnapshotVolumesListsFromJSON(json['snapshotVolumes']),
        'sourceUID': json['sourceUID'] == null ? undefined : json['sourceUID'],
        'virtualMachineSnapshotContentName': json['virtualMachineSnapshotContentName'] == null ? undefined : json['virtualMachineSnapshotContentName'],
    };
}
export function V1beta1VirtualMachineSnapshotStatusToJSON(json) {
    return V1beta1VirtualMachineSnapshotStatusToJSONTyped(json, false);
}
export function V1beta1VirtualMachineSnapshotStatusToJSONTyped(value, _ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'conditions': value['conditions'] == null ? undefined : (value['conditions'].map(V1beta1ConditionToJSON)),
        'creationTime': value['creationTime'],
        'error': V1beta1ErrorToJSON(value['error']),
        'indications': value['indications'],
        'phase': value['phase'],
        'readyToUse': value['readyToUse'],
        'snapshotVolumes': V1beta1SnapshotVolumesListsToJSON(value['snapshotVolumes']),
        'sourceUID': value['sourceUID'],
        'virtualMachineSnapshotContentName': value['virtualMachineSnapshotContentName'],
    };
}
//# sourceMappingURL=V1beta1VirtualMachineSnapshotStatus.js.map