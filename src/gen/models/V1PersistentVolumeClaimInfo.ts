/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http.js';

/**
* PersistentVolumeClaimInfo contains the relavant information virt-handler needs cached about a PVC
*/
export class V1PersistentVolumeClaimInfo {
    /**
    * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    */
    'accessModes'?: Array<V1PersistentVolumeClaimInfoAccessModesEnum>;
    /**
    * Capacity represents the capacity set on the corresponding PVC status
    */
    'capacity'?: { [key: string]: string; };
    /**
    * ClaimName is the name of the PVC
    */
    'claimName'?: string;
    /**
    * Percentage of filesystem\'s size to be reserved when resizing the PVC
    */
    'filesystemOverhead'?: string;
    /**
    * Preallocated indicates if the PVC\'s storage is preallocated or not
    */
    'preallocated'?: boolean;
    /**
    * Requests represents the resources requested by the corresponding PVC spec
    */
    'requests'?: { [key: string]: string; };
    /**
    * VolumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.  Possible enum values:  - `\"Block\"` means the volume will not be formatted with a filesystem and will remain a raw block device.  - `\"Filesystem\"` means the volume will be or is formatted with a filesystem.
    */
    'volumeMode'?: V1PersistentVolumeClaimInfoVolumeModeEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accessModes",
            "baseName": "accessModes",
            "type": "Array<V1PersistentVolumeClaimInfoAccessModesEnum>",
            "format": ""
        },
        {
            "name": "capacity",
            "baseName": "capacity",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "claimName",
            "baseName": "claimName",
            "type": "string",
            "format": ""
        },
        {
            "name": "filesystemOverhead",
            "baseName": "filesystemOverhead",
            "type": "string",
            "format": ""
        },
        {
            "name": "preallocated",
            "baseName": "preallocated",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "requests",
            "baseName": "requests",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "volumeMode",
            "baseName": "volumeMode",
            "type": "V1PersistentVolumeClaimInfoVolumeModeEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return V1PersistentVolumeClaimInfo.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum V1PersistentVolumeClaimInfoAccessModesEnum {
    ReadOnlyMany = 'ReadOnlyMany',
    ReadWriteMany = 'ReadWriteMany',
    ReadWriteOnce = 'ReadWriteOnce',
    ReadWriteOncePod = 'ReadWriteOncePod'
}
export enum V1PersistentVolumeClaimInfoVolumeModeEnum {
    Block = 'Block',
    Filesystem = 'Filesystem'
}

