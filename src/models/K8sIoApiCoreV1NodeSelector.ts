/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { K8sIoApiCoreV1NodeSelectorTerm } from './K8sIoApiCoreV1NodeSelectorTerm';
import {
    K8sIoApiCoreV1NodeSelectorTermFromJSON,
    K8sIoApiCoreV1NodeSelectorTermFromJSONTyped,
    K8sIoApiCoreV1NodeSelectorTermToJSON,
    K8sIoApiCoreV1NodeSelectorTermToJSONTyped,
} from './K8sIoApiCoreV1NodeSelectorTerm';

/**
 * A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
 * @export
 * @interface K8sIoApiCoreV1NodeSelector
 */
export interface K8sIoApiCoreV1NodeSelector {
    /**
     * Required. A list of node selector terms. The terms are ORed.
     * @type {Array<K8sIoApiCoreV1NodeSelectorTerm>}
     * @memberof K8sIoApiCoreV1NodeSelector
     */
    nodeSelectorTerms: Array<K8sIoApiCoreV1NodeSelectorTerm>;
}

/**
 * Check if a given object implements the K8sIoApiCoreV1NodeSelector interface.
 */
export function instanceOfK8sIoApiCoreV1NodeSelector(value: object): value is K8sIoApiCoreV1NodeSelector {
    if (!('nodeSelectorTerms' in value) || value['nodeSelectorTerms'] === undefined) return false;
    return true;
}

export function K8sIoApiCoreV1NodeSelectorFromJSON(json: any): K8sIoApiCoreV1NodeSelector {
    return K8sIoApiCoreV1NodeSelectorFromJSONTyped(json, false);
}

export function K8sIoApiCoreV1NodeSelectorFromJSONTyped(json: any, _ignoreDiscriminator: boolean): K8sIoApiCoreV1NodeSelector {
    if (json == null) {
        return json;
    }
    return {
        
        'nodeSelectorTerms': ((json['nodeSelectorTerms'] as Array<any>).map(K8sIoApiCoreV1NodeSelectorTermFromJSON)),
    };
}

export function K8sIoApiCoreV1NodeSelectorToJSON(json: any): K8sIoApiCoreV1NodeSelector {
    return K8sIoApiCoreV1NodeSelectorToJSONTyped(json, false);
}

export function K8sIoApiCoreV1NodeSelectorToJSONTyped(value?: K8sIoApiCoreV1NodeSelector | null, _ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'nodeSelectorTerms': ((value['nodeSelectorTerms'] as Array<any>).map(K8sIoApiCoreV1NodeSelectorTermToJSON)),
    };
}

