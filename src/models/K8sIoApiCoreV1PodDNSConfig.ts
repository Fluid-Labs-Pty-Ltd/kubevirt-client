/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { K8sIoApiCoreV1PodDNSConfigOption } from './K8sIoApiCoreV1PodDNSConfigOption';
import {
    K8sIoApiCoreV1PodDNSConfigOptionFromJSON,
    K8sIoApiCoreV1PodDNSConfigOptionFromJSONTyped,
    K8sIoApiCoreV1PodDNSConfigOptionToJSON,
    K8sIoApiCoreV1PodDNSConfigOptionToJSONTyped,
} from './K8sIoApiCoreV1PodDNSConfigOption';

/**
 * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
 * @export
 * @interface K8sIoApiCoreV1PodDNSConfig
 */
export interface K8sIoApiCoreV1PodDNSConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     * @type {Array<string>}
     * @memberof K8sIoApiCoreV1PodDNSConfig
     */
    nameservers?: Array<string>;
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     * @type {Array<K8sIoApiCoreV1PodDNSConfigOption>}
     * @memberof K8sIoApiCoreV1PodDNSConfig
     */
    options?: Array<K8sIoApiCoreV1PodDNSConfigOption>;
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     * @type {Array<string>}
     * @memberof K8sIoApiCoreV1PodDNSConfig
     */
    searches?: Array<string>;
}

/**
 * Check if a given object implements the K8sIoApiCoreV1PodDNSConfig interface.
 */
export function instanceOfK8sIoApiCoreV1PodDNSConfig(value: object): value is K8sIoApiCoreV1PodDNSConfig {
    return true;
}

export function K8sIoApiCoreV1PodDNSConfigFromJSON(json: any): K8sIoApiCoreV1PodDNSConfig {
    return K8sIoApiCoreV1PodDNSConfigFromJSONTyped(json, false);
}

export function K8sIoApiCoreV1PodDNSConfigFromJSONTyped(json: any, _ignoreDiscriminator: boolean): K8sIoApiCoreV1PodDNSConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'nameservers': json['nameservers'] == null ? undefined : json['nameservers'],
        'options': json['options'] == null ? undefined : ((json['options'] as Array<any>).map(K8sIoApiCoreV1PodDNSConfigOptionFromJSON)),
        'searches': json['searches'] == null ? undefined : json['searches'],
    };
}

export function K8sIoApiCoreV1PodDNSConfigToJSON(json: any): K8sIoApiCoreV1PodDNSConfig {
    return K8sIoApiCoreV1PodDNSConfigToJSONTyped(json, false);
}

export function K8sIoApiCoreV1PodDNSConfigToJSONTyped(value?: K8sIoApiCoreV1PodDNSConfig | null, _ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'nameservers': value['nameservers'],
        'options': value['options'] == null ? undefined : ((value['options'] as Array<any>).map(K8sIoApiCoreV1PodDNSConfigOptionToJSON)),
        'searches': value['searches'],
    };
}

