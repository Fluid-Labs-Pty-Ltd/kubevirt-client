/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1BIOS } from './V1BIOS';
import {
    V1BIOSFromJSON,
    V1BIOSFromJSONTyped,
    V1BIOSToJSON,
    V1BIOSToJSONTyped,
} from './V1BIOS';
import type { V1EFI } from './V1EFI';
import {
    V1EFIFromJSON,
    V1EFIFromJSONTyped,
    V1EFIToJSON,
    V1EFIToJSONTyped,
} from './V1EFI';

/**
 * Represents the firmware blob used to assist in the domain creation process. Used for setting the QEMU BIOS file path for the libvirt domain.
 * @export
 * @interface V1Bootloader
 */
export interface V1Bootloader {
    /**
     * 
     * @type {V1BIOS}
     * @memberof V1Bootloader
     */
    bios?: V1BIOS;
    /**
     * 
     * @type {V1EFI}
     * @memberof V1Bootloader
     */
    efi?: V1EFI;
}

/**
 * Check if a given object implements the V1Bootloader interface.
 */
export function instanceOfV1Bootloader(value: object): value is V1Bootloader {
    return true;
}

export function V1BootloaderFromJSON(json: any): V1Bootloader {
    return V1BootloaderFromJSONTyped(json, false);
}

export function V1BootloaderFromJSONTyped(json: any, _ignoreDiscriminator: boolean): V1Bootloader {
    if (json == null) {
        return json;
    }
    return {
        
        'bios': json['bios'] == null ? undefined : V1BIOSFromJSON(json['bios']),
        'efi': json['efi'] == null ? undefined : V1EFIFromJSON(json['efi']),
    };
}

export function V1BootloaderToJSON(json: any): V1Bootloader {
    return V1BootloaderToJSONTyped(json, false);
}

export function V1BootloaderToJSONTyped(value?: V1Bootloader | null, _ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bios': V1BIOSToJSON(value['bios']),
        'efi': V1EFIToJSON(value['efi']),
    };
}

