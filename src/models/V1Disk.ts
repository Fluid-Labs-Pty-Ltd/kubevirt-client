/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1DiskTarget } from './V1DiskTarget';
import {
    V1DiskTargetFromJSON,
    V1DiskTargetFromJSONTyped,
    V1DiskTargetToJSON,
    V1DiskTargetToJSONTyped,
} from './V1DiskTarget';
import type { V1LunTarget } from './V1LunTarget';
import {
    V1LunTargetFromJSON,
    V1LunTargetFromJSONTyped,
    V1LunTargetToJSON,
    V1LunTargetToJSONTyped,
} from './V1LunTarget';
import type { V1BlockSize } from './V1BlockSize';
import {
    V1BlockSizeFromJSON,
    V1BlockSizeFromJSONTyped,
    V1BlockSizeToJSON,
    V1BlockSizeToJSONTyped,
} from './V1BlockSize';
import type { V1CDRomTarget } from './V1CDRomTarget';
import {
    V1CDRomTargetFromJSON,
    V1CDRomTargetFromJSONTyped,
    V1CDRomTargetToJSON,
    V1CDRomTargetToJSONTyped,
} from './V1CDRomTarget';

/**
 * 
 * @export
 * @interface V1Disk
 */
export interface V1Disk {
    /**
     * 
     * @type {V1BlockSize}
     * @memberof V1Disk
     */
    blockSize?: V1BlockSize;
    /**
     * BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.
     * @type {number}
     * @memberof V1Disk
     */
    bootOrder?: number;
    /**
     * Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.
     * @type {string}
     * @memberof V1Disk
     */
    cache?: string;
    /**
     * 
     * @type {V1CDRomTarget}
     * @memberof V1Disk
     */
    cdrom?: V1CDRomTarget;
    /**
     * dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.
     * @type {boolean}
     * @memberof V1Disk
     */
    dedicatedIOThread?: boolean;
    /**
     * 
     * @type {V1DiskTarget}
     * @memberof V1Disk
     */
    disk?: V1DiskTarget;
    /**
     * If specified, it can change the default error policy (stop) for the disk
     * @type {string}
     * @memberof V1Disk
     */
    errorPolicy?: string;
    /**
     * IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.
     * @type {string}
     * @memberof V1Disk
     */
    io?: string;
    /**
     * 
     * @type {V1LunTarget}
     * @memberof V1Disk
     */
    lun?: V1LunTarget;
    /**
     * Name is the device name
     * @type {string}
     * @memberof V1Disk
     */
    name: string;
    /**
     * Serial provides the ability to specify a serial number for the disk device.
     * @type {string}
     * @memberof V1Disk
     */
    serial?: string;
    /**
     * If specified the disk is made sharable and multiple write from different VMs are permitted
     * @type {boolean}
     * @memberof V1Disk
     */
    shareable?: boolean;
    /**
     * If specified, disk address and its tag will be provided to the guest via config drive metadata
     * @type {string}
     * @memberof V1Disk
     */
    tag?: string;
}

/**
 * Check if a given object implements the V1Disk interface.
 */
export function instanceOfV1Disk(value: object): value is V1Disk {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function V1DiskFromJSON(json: any): V1Disk {
    return V1DiskFromJSONTyped(json, false);
}

export function V1DiskFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Disk {
    if (json == null) {
        return json;
    }
    return {
        
        'blockSize': json['blockSize'] == null ? undefined : V1BlockSizeFromJSON(json['blockSize']),
        'bootOrder': json['bootOrder'] == null ? undefined : json['bootOrder'],
        'cache': json['cache'] == null ? undefined : json['cache'],
        'cdrom': json['cdrom'] == null ? undefined : V1CDRomTargetFromJSON(json['cdrom']),
        'dedicatedIOThread': json['dedicatedIOThread'] == null ? undefined : json['dedicatedIOThread'],
        'disk': json['disk'] == null ? undefined : V1DiskTargetFromJSON(json['disk']),
        'errorPolicy': json['errorPolicy'] == null ? undefined : json['errorPolicy'],
        'io': json['io'] == null ? undefined : json['io'],
        'lun': json['lun'] == null ? undefined : V1LunTargetFromJSON(json['lun']),
        'name': json['name'],
        'serial': json['serial'] == null ? undefined : json['serial'],
        'shareable': json['shareable'] == null ? undefined : json['shareable'],
        'tag': json['tag'] == null ? undefined : json['tag'],
    };
}

export function V1DiskToJSON(json: any): V1Disk {
    return V1DiskToJSONTyped(json, false);
}

export function V1DiskToJSONTyped(value?: V1Disk | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'blockSize': V1BlockSizeToJSON(value['blockSize']),
        'bootOrder': value['bootOrder'],
        'cache': value['cache'],
        'cdrom': V1CDRomTargetToJSON(value['cdrom']),
        'dedicatedIOThread': value['dedicatedIOThread'],
        'disk': V1DiskTargetToJSON(value['disk']),
        'errorPolicy': value['errorPolicy'],
        'io': value['io'],
        'lun': V1LunTargetToJSON(value['lun']),
        'name': value['name'],
        'serial': value['serial'],
        'shareable': value['shareable'],
        'tag': value['tag'],
    };
}

