/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1DHCPOptions } from './V1DHCPOptions';
import {
    V1DHCPOptionsFromJSON,
    V1DHCPOptionsFromJSONTyped,
    V1DHCPOptionsToJSON,
    V1DHCPOptionsToJSONTyped,
} from './V1DHCPOptions';
import type { V1PluginBinding } from './V1PluginBinding';
import {
    V1PluginBindingFromJSON,
    V1PluginBindingFromJSONTyped,
    V1PluginBindingToJSON,
    V1PluginBindingToJSONTyped,
} from './V1PluginBinding';
import type { V1Port } from './V1Port';
import {
    V1PortFromJSON,
    V1PortFromJSONTyped,
    V1PortToJSON,
    V1PortToJSONTyped,
} from './V1Port';

/**
 * 
 * @export
 * @interface V1Interface
 */
export interface V1Interface {
    /**
     * If specified, the ACPI index is used to provide network interface device naming, that is stable across changes in PCI addresses assigned to the device. This value is required to be unique across all devices and be between 1 and (16*1024-1).
     * @type {number}
     * @memberof V1Interface
     */
    acpiIndex?: number;
    /**
     * 
     * @type {V1PluginBinding}
     * @memberof V1Interface
     */
    binding?: V1PluginBinding;
    /**
     * BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried.
     * @type {number}
     * @memberof V1Interface
     */
    bootOrder?: number;
    /**
     * InterfaceBridge connects to a given network via a linux bridge.
     * @type {object}
     * @memberof V1Interface
     */
    bridge?: object;
    /**
     * 
     * @type {V1DHCPOptions}
     * @memberof V1Interface
     */
    dhcpOptions?: V1DHCPOptions;
    /**
     * Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
     * @type {string}
     * @memberof V1Interface
     */
    macAddress?: string;
    /**
     * DeprecatedInterfaceMacvtap is an alias to the deprecated InterfaceMacvtap that connects to a given network by extending the Kubernetes node's L2 networks via a macvtap interface. Deprecated: Removed in v1.3
     * @type {object}
     * @memberof V1Interface
     */
    macvtap?: object;
    /**
     * InterfaceMasquerade connects to a given network using netfilter rules to nat the traffic.
     * @type {object}
     * @memberof V1Interface
     */
    masquerade?: object;
    /**
     * Interface model. One of: e1000, e1000e, igb, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio.
     * @type {string}
     * @memberof V1Interface
     */
    model?: string;
    /**
     * Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network.
     * @type {string}
     * @memberof V1Interface
     */
    name: string;
    /**
     * DeprecatedInterfacePasst is an alias to the deprecated InterfacePasst Deprecated: Removed in v1.3
     * @type {object}
     * @memberof V1Interface
     */
    passt?: object;
    /**
     * If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
     * @type {string}
     * @memberof V1Interface
     */
    pciAddress?: string;
    /**
     * List of ports to be forwarded to the virtual machine.
     * @type {Array<V1Port>}
     * @memberof V1Interface
     */
    ports?: Array<V1Port>;
    /**
     * DeprecatedInterfaceSlirp is an alias to the deprecated InterfaceSlirp that connects to a given network using QEMU user networking mode. Deprecated: Removed in v1.3
     * @type {object}
     * @memberof V1Interface
     */
    slirp?: object;
    /**
     * InterfaceSRIOV connects to a given network by passing-through an SR-IOV PCI device via vfio.
     * @type {object}
     * @memberof V1Interface
     */
    sriov?: object;
    /**
     * State represents the requested operational state of the interface. The (only) value supported is `absent`, expressing a request to remove the interface.
     * @type {string}
     * @memberof V1Interface
     */
    state?: string;
    /**
     * If specified, the virtual network interface address and its tag will be provided to the guest via config drive
     * @type {string}
     * @memberof V1Interface
     */
    tag?: string;
}

/**
 * Check if a given object implements the V1Interface interface.
 */
export function instanceOfV1Interface(value: object): value is V1Interface {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function V1InterfaceFromJSON(json: any): V1Interface {
    return V1InterfaceFromJSONTyped(json, false);
}

export function V1InterfaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Interface {
    if (json == null) {
        return json;
    }
    return {
        
        'acpiIndex': json['acpiIndex'] == null ? undefined : json['acpiIndex'],
        'binding': json['binding'] == null ? undefined : V1PluginBindingFromJSON(json['binding']),
        'bootOrder': json['bootOrder'] == null ? undefined : json['bootOrder'],
        'bridge': json['bridge'] == null ? undefined : json['bridge'],
        'dhcpOptions': json['dhcpOptions'] == null ? undefined : V1DHCPOptionsFromJSON(json['dhcpOptions']),
        'macAddress': json['macAddress'] == null ? undefined : json['macAddress'],
        'macvtap': json['macvtap'] == null ? undefined : json['macvtap'],
        'masquerade': json['masquerade'] == null ? undefined : json['masquerade'],
        'model': json['model'] == null ? undefined : json['model'],
        'name': json['name'],
        'passt': json['passt'] == null ? undefined : json['passt'],
        'pciAddress': json['pciAddress'] == null ? undefined : json['pciAddress'],
        'ports': json['ports'] == null ? undefined : ((json['ports'] as Array<any>).map(V1PortFromJSON)),
        'slirp': json['slirp'] == null ? undefined : json['slirp'],
        'sriov': json['sriov'] == null ? undefined : json['sriov'],
        'state': json['state'] == null ? undefined : json['state'],
        'tag': json['tag'] == null ? undefined : json['tag'],
    };
}

export function V1InterfaceToJSON(json: any): V1Interface {
    return V1InterfaceToJSONTyped(json, false);
}

export function V1InterfaceToJSONTyped(value?: V1Interface | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'acpiIndex': value['acpiIndex'],
        'binding': V1PluginBindingToJSON(value['binding']),
        'bootOrder': value['bootOrder'],
        'bridge': value['bridge'],
        'dhcpOptions': V1DHCPOptionsToJSON(value['dhcpOptions']),
        'macAddress': value['macAddress'],
        'macvtap': value['macvtap'],
        'masquerade': value['masquerade'],
        'model': value['model'],
        'name': value['name'],
        'passt': value['passt'],
        'pciAddress': value['pciAddress'],
        'ports': value['ports'] == null ? undefined : ((value['ports'] as Array<any>).map(V1PortToJSON)),
        'slirp': value['slirp'],
        'sriov': value['sriov'],
        'state': value['state'],
        'tag': value['tag'],
    };
}

