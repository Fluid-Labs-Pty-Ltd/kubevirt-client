/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1NodeMediatedDeviceTypesConfig } from './V1NodeMediatedDeviceTypesConfig';
import {
    V1NodeMediatedDeviceTypesConfigFromJSON,
    V1NodeMediatedDeviceTypesConfigFromJSONTyped,
    V1NodeMediatedDeviceTypesConfigToJSON,
    V1NodeMediatedDeviceTypesConfigToJSONTyped,
} from './V1NodeMediatedDeviceTypesConfig';

/**
 * MediatedDevicesConfiguration holds information about MDEV types to be defined, if available
 * @export
 * @interface V1MediatedDevicesConfiguration
 */
export interface V1MediatedDevicesConfiguration {
    /**
     * 
     * @type {Array<string>}
     * @memberof V1MediatedDevicesConfiguration
     */
    mediatedDeviceTypes?: Array<string>;
    /**
     * Deprecated. Use mediatedDeviceTypes instead.
     * @type {Array<string>}
     * @memberof V1MediatedDevicesConfiguration
     */
    mediatedDevicesTypes?: Array<string>;
    /**
     * 
     * @type {Array<V1NodeMediatedDeviceTypesConfig>}
     * @memberof V1MediatedDevicesConfiguration
     */
    nodeMediatedDeviceTypes?: Array<V1NodeMediatedDeviceTypesConfig>;
}

/**
 * Check if a given object implements the V1MediatedDevicesConfiguration interface.
 */
export function instanceOfV1MediatedDevicesConfiguration(value: object): value is V1MediatedDevicesConfiguration {
    return true;
}

export function V1MediatedDevicesConfigurationFromJSON(json: any): V1MediatedDevicesConfiguration {
    return V1MediatedDevicesConfigurationFromJSONTyped(json, false);
}

export function V1MediatedDevicesConfigurationFromJSONTyped(json: any, _ignoreDiscriminator: boolean): V1MediatedDevicesConfiguration {
    if (json == null) {
        return json;
    }
    return {
        
        'mediatedDeviceTypes': json['mediatedDeviceTypes'] == null ? undefined : json['mediatedDeviceTypes'],
        'mediatedDevicesTypes': json['mediatedDevicesTypes'] == null ? undefined : json['mediatedDevicesTypes'],
        'nodeMediatedDeviceTypes': json['nodeMediatedDeviceTypes'] == null ? undefined : ((json['nodeMediatedDeviceTypes'] as Array<any>).map(V1NodeMediatedDeviceTypesConfigFromJSON)),
    };
}

export function V1MediatedDevicesConfigurationToJSON(json: any): V1MediatedDevicesConfiguration {
    return V1MediatedDevicesConfigurationToJSONTyped(json, false);
}

export function V1MediatedDevicesConfigurationToJSONTyped(value?: V1MediatedDevicesConfiguration | null, _ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mediatedDeviceTypes': value['mediatedDeviceTypes'],
        'mediatedDevicesTypes': value['mediatedDevicesTypes'],
        'nodeMediatedDeviceTypes': value['nodeMediatedDeviceTypes'] == null ? undefined : ((value['nodeMediatedDeviceTypes'] as Array<any>).map(V1NodeMediatedDeviceTypesConfigToJSON)),
    };
}

