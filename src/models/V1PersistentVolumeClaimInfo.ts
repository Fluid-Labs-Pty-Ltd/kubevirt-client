/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * PersistentVolumeClaimInfo contains the relavant information virt-handler needs cached about a PVC
 * @export
 * @interface V1PersistentVolumeClaimInfo
 */
export interface V1PersistentVolumeClaimInfo {
    /**
     * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     * @type {Array<string>}
     * @memberof V1PersistentVolumeClaimInfo
     */
    accessModes?: Array<V1PersistentVolumeClaimInfoAccessModesEnum>;
    /**
     * Capacity represents the capacity set on the corresponding PVC status
     * @type {{ [key: string]: string; }}
     * @memberof V1PersistentVolumeClaimInfo
     */
    capacity?: { [key: string]: string; };
    /**
     * ClaimName is the name of the PVC
     * @type {string}
     * @memberof V1PersistentVolumeClaimInfo
     */
    claimName?: string;
    /**
     * Percentage of filesystem's size to be reserved when resizing the PVC
     * @type {string}
     * @memberof V1PersistentVolumeClaimInfo
     */
    filesystemOverhead?: string;
    /**
     * Preallocated indicates if the PVC's storage is preallocated or not
     * @type {boolean}
     * @memberof V1PersistentVolumeClaimInfo
     */
    preallocated?: boolean;
    /**
     * Requests represents the resources requested by the corresponding PVC spec
     * @type {{ [key: string]: string; }}
     * @memberof V1PersistentVolumeClaimInfo
     */
    requests?: { [key: string]: string; };
    /**
     * VolumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
     * 
     * Possible enum values:
     *  - `"Block"` means the volume will not be formatted with a filesystem and will remain a raw block device.
     *  - `"Filesystem"` means the volume will be or is formatted with a filesystem.
     * @type {string}
     * @memberof V1PersistentVolumeClaimInfo
     */
    volumeMode?: V1PersistentVolumeClaimInfoVolumeModeEnum;
}


/**
 * @export
 */
export const V1PersistentVolumeClaimInfoAccessModesEnum = {
    ReadOnlyMany: 'ReadOnlyMany',
    ReadWriteMany: 'ReadWriteMany',
    ReadWriteOnce: 'ReadWriteOnce',
    ReadWriteOncePod: 'ReadWriteOncePod'
} as const;
export type V1PersistentVolumeClaimInfoAccessModesEnum = typeof V1PersistentVolumeClaimInfoAccessModesEnum[keyof typeof V1PersistentVolumeClaimInfoAccessModesEnum];

/**
 * @export
 */
export const V1PersistentVolumeClaimInfoVolumeModeEnum = {
    Block: 'Block',
    Filesystem: 'Filesystem'
} as const;
export type V1PersistentVolumeClaimInfoVolumeModeEnum = typeof V1PersistentVolumeClaimInfoVolumeModeEnum[keyof typeof V1PersistentVolumeClaimInfoVolumeModeEnum];


/**
 * Check if a given object implements the V1PersistentVolumeClaimInfo interface.
 */
export function instanceOfV1PersistentVolumeClaimInfo(value: object): value is V1PersistentVolumeClaimInfo {
    return true;
}

export function V1PersistentVolumeClaimInfoFromJSON(json: any): V1PersistentVolumeClaimInfo {
    return V1PersistentVolumeClaimInfoFromJSONTyped(json, false);
}

export function V1PersistentVolumeClaimInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PersistentVolumeClaimInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'accessModes': json['accessModes'] == null ? undefined : json['accessModes'],
        'capacity': json['capacity'] == null ? undefined : json['capacity'],
        'claimName': json['claimName'] == null ? undefined : json['claimName'],
        'filesystemOverhead': json['filesystemOverhead'] == null ? undefined : json['filesystemOverhead'],
        'preallocated': json['preallocated'] == null ? undefined : json['preallocated'],
        'requests': json['requests'] == null ? undefined : json['requests'],
        'volumeMode': json['volumeMode'] == null ? undefined : json['volumeMode'],
    };
}

export function V1PersistentVolumeClaimInfoToJSON(json: any): V1PersistentVolumeClaimInfo {
    return V1PersistentVolumeClaimInfoToJSONTyped(json, false);
}

export function V1PersistentVolumeClaimInfoToJSONTyped(value?: V1PersistentVolumeClaimInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'accessModes': value['accessModes'],
        'capacity': value['capacity'],
        'claimName': value['claimName'],
        'filesystemOverhead': value['filesystemOverhead'],
        'preallocated': value['preallocated'],
        'requests': value['requests'],
        'volumeMode': value['volumeMode'],
    };
}

