/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { V1ResourceRequirementsWithoutClaims } from './V1ResourceRequirementsWithoutClaims';
import {
    V1ResourceRequirementsWithoutClaimsFromJSON,
    V1ResourceRequirementsWithoutClaimsFromJSONTyped,
    V1ResourceRequirementsWithoutClaimsToJSON,
    V1ResourceRequirementsWithoutClaimsToJSONTyped,
} from './V1ResourceRequirementsWithoutClaims';

/**
 * SupportContainerResources are used to specify the cpu/memory request and limits for the containers that support various features of Virtual Machines. These containers are usually idle and don't require a lot of memory or cpu.
 * @export
 * @interface V1SupportContainerResources
 */
export interface V1SupportContainerResources {
    /**
     * 
     * @type {V1ResourceRequirementsWithoutClaims}
     * @memberof V1SupportContainerResources
     */
    resources: V1ResourceRequirementsWithoutClaims;
    /**
     * 
     * @type {string}
     * @memberof V1SupportContainerResources
     */
    type: string;
}

/**
 * Check if a given object implements the V1SupportContainerResources interface.
 */
export function instanceOfV1SupportContainerResources(value: object): value is V1SupportContainerResources {
    if (!('resources' in value) || value['resources'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function V1SupportContainerResourcesFromJSON(json: any): V1SupportContainerResources {
    return V1SupportContainerResourcesFromJSONTyped(json, false);
}

export function V1SupportContainerResourcesFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1SupportContainerResources {
    if (json == null) {
        return json;
    }
    return {
        
        'resources': V1ResourceRequirementsWithoutClaimsFromJSON(json['resources']),
        'type': json['type'],
    };
}

export function V1SupportContainerResourcesToJSON(json: any): V1SupportContainerResources {
    return V1SupportContainerResourcesToJSONTyped(json, false);
}

export function V1SupportContainerResourcesToJSONTyped(value?: V1SupportContainerResources | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'resources': V1ResourceRequirementsWithoutClaimsToJSON(value['resources']),
        'type': value['type'],
    };
}

