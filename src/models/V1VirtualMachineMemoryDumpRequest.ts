/* tslint:disable */
/* eslint-disable */
/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * VirtualMachineMemoryDumpRequest represent the memory dump request phase and info
 * @export
 * @interface V1VirtualMachineMemoryDumpRequest
 */
export interface V1VirtualMachineMemoryDumpRequest {
    /**
     * ClaimName is the name of the pvc that will contain the memory dump
     * @type {string}
     * @memberof V1VirtualMachineMemoryDumpRequest
     */
    claimName: string;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {string}
     * @memberof V1VirtualMachineMemoryDumpRequest
     */
    endTimestamp?: string;
    /**
     * FileName represents the name of the output file
     * @type {string}
     * @memberof V1VirtualMachineMemoryDumpRequest
     */
    fileName?: string;
    /**
     * Message is a detailed message about failure of the memory dump
     * @type {string}
     * @memberof V1VirtualMachineMemoryDumpRequest
     */
    message?: string;
    /**
     * Phase represents the memory dump phase
     * @type {string}
     * @memberof V1VirtualMachineMemoryDumpRequest
     */
    phase: string;
    /**
     * Remove represents request of dissociating the memory dump pvc
     * @type {boolean}
     * @memberof V1VirtualMachineMemoryDumpRequest
     */
    remove?: boolean;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     * @type {string}
     * @memberof V1VirtualMachineMemoryDumpRequest
     */
    startTimestamp?: string;
}

/**
 * Check if a given object implements the V1VirtualMachineMemoryDumpRequest interface.
 */
export function instanceOfV1VirtualMachineMemoryDumpRequest(value: object): value is V1VirtualMachineMemoryDumpRequest {
    if (!('claimName' in value) || value['claimName'] === undefined) return false;
    if (!('phase' in value) || value['phase'] === undefined) return false;
    return true;
}

export function V1VirtualMachineMemoryDumpRequestFromJSON(json: any): V1VirtualMachineMemoryDumpRequest {
    return V1VirtualMachineMemoryDumpRequestFromJSONTyped(json, false);
}

export function V1VirtualMachineMemoryDumpRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1VirtualMachineMemoryDumpRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'claimName': json['claimName'],
        'endTimestamp': json['endTimestamp'] == null ? undefined : json['endTimestamp'],
        'fileName': json['fileName'] == null ? undefined : json['fileName'],
        'message': json['message'] == null ? undefined : json['message'],
        'phase': json['phase'],
        'remove': json['remove'] == null ? undefined : json['remove'],
        'startTimestamp': json['startTimestamp'] == null ? undefined : json['startTimestamp'],
    };
}

export function V1VirtualMachineMemoryDumpRequestToJSON(json: any): V1VirtualMachineMemoryDumpRequest {
    return V1VirtualMachineMemoryDumpRequestToJSONTyped(json, false);
}

export function V1VirtualMachineMemoryDumpRequestToJSONTyped(value?: V1VirtualMachineMemoryDumpRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'claimName': value['claimName'],
        'endTimestamp': value['endTimestamp'],
        'fileName': value['fileName'],
        'message': value['message'],
        'phase': value['phase'],
        'remove': value['remove'],
        'startTimestamp': value['startTimestamp'],
    };
}

