/**
 * KubeVirt API
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { K8sIoApiCoreV1ResourceRequirements } from '../models/K8sIoApiCoreV1ResourceRequirements.js';
import { K8sIoApiCoreV1TypedLocalObjectReference } from '../models/K8sIoApiCoreV1TypedLocalObjectReference.js';
import { K8sIoApiCoreV1TypedObjectReference } from '../models/K8sIoApiCoreV1TypedObjectReference.js';
import { K8sIoApimachineryPkgApisMetaV1LabelSelector } from '../models/K8sIoApimachineryPkgApisMetaV1LabelSelector.js';
import { HttpFile } from '../http/http.js';

/**
* StorageSpec defines the Storage type specification
*/
export class V1beta1StorageSpec {
    /**
    * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    */
    'accessModes'?: Array<V1beta1StorageSpecAccessModesEnum>;
    'dataSource'?: K8sIoApiCoreV1TypedLocalObjectReference;
    'dataSourceRef'?: K8sIoApiCoreV1TypedObjectReference;
    'resources'?: K8sIoApiCoreV1ResourceRequirements;
    'selector'?: K8sIoApimachineryPkgApisMetaV1LabelSelector;
    /**
    * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    */
    'storageClassName'?: string;
    /**
    * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.  Possible enum values:  - `\"Block\"` means the volume will not be formatted with a filesystem and will remain a raw block device.  - `\"Filesystem\"` means the volume will be or is formatted with a filesystem.
    */
    'volumeMode'?: V1beta1StorageSpecVolumeModeEnum;
    /**
    * VolumeName is the binding reference to the PersistentVolume backing this claim.
    */
    'volumeName'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accessModes",
            "baseName": "accessModes",
            "type": "Array<V1beta1StorageSpecAccessModesEnum>",
            "format": ""
        },
        {
            "name": "dataSource",
            "baseName": "dataSource",
            "type": "K8sIoApiCoreV1TypedLocalObjectReference",
            "format": ""
        },
        {
            "name": "dataSourceRef",
            "baseName": "dataSourceRef",
            "type": "K8sIoApiCoreV1TypedObjectReference",
            "format": ""
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "K8sIoApiCoreV1ResourceRequirements",
            "format": ""
        },
        {
            "name": "selector",
            "baseName": "selector",
            "type": "K8sIoApimachineryPkgApisMetaV1LabelSelector",
            "format": ""
        },
        {
            "name": "storageClassName",
            "baseName": "storageClassName",
            "type": "string",
            "format": ""
        },
        {
            "name": "volumeMode",
            "baseName": "volumeMode",
            "type": "V1beta1StorageSpecVolumeModeEnum",
            "format": ""
        },
        {
            "name": "volumeName",
            "baseName": "volumeName",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return V1beta1StorageSpec.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum V1beta1StorageSpecAccessModesEnum {
    ReadOnlyMany = 'ReadOnlyMany',
    ReadWriteMany = 'ReadWriteMany',
    ReadWriteOnce = 'ReadWriteOnce',
    ReadWriteOncePod = 'ReadWriteOncePod'
}
export enum V1beta1StorageSpecVolumeModeEnum {
    Block = 'Block',
    Filesystem = 'Filesystem'
}

